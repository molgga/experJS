{
    "project": {},
    "files": {
        "experJS\\events\\EXCustomEvent.js": {
            "name": "experJS\\events\\EXCustomEvent.js",
            "modules": {},
            "classes": {
                "EXCustomEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\events\\EXEvent.js": {
            "name": "experJS\\events\\EXEvent.js",
            "modules": {},
            "classes": {
                "EXEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\events\\EXEventListener.js": {
            "name": "experJS\\events\\EXEventListener.js",
            "modules": {},
            "classes": {
                "EXEventListener": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\net\\EXJsonLoader.js": {
            "name": "experJS\\net\\EXJsonLoader.js",
            "modules": {},
            "classes": {
                "EXJsonLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\net\\EXLoader.js": {
            "name": "experJS\\net\\EXLoader.js",
            "modules": {},
            "classes": {
                "EXLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\net\\EXTextLoader.js": {
            "name": "experJS\\net\\EXTextLoader.js",
            "modules": {},
            "classes": {
                "EXTextLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\net\\EXURLRequest.js": {
            "name": "experJS\\net\\EXURLRequest.js",
            "modules": {},
            "classes": {
                "EXURLRequest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\net\\EXXmlLoader.js": {
            "name": "experJS\\net\\EXXmlLoader.js",
            "modules": {},
            "classes": {
                "EXXmlLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\transitions\\EXEasing.js": {
            "name": "experJS\\transitions\\EXEasing.js",
            "modules": {},
            "classes": {
                "EXEasing": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\transitions\\EXTiming.js": {
            "name": "experJS\\transitions\\EXTiming.js",
            "modules": {},
            "classes": {
                "EXTiming": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\transitions\\EXTransform.js": {
            "name": "experJS\\transitions\\EXTransform.js",
            "modules": {},
            "classes": {
                "EXTransform": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\transitions\\EXTween.js": {
            "name": "experJS\\transitions\\EXTween.js",
            "modules": {},
            "classes": {
                "EXTween": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\ui\\EXCheckBox.js": {
            "name": "experJS\\ui\\EXCheckBox.js",
            "modules": {},
            "classes": {
                "EXCheckBox": 1,
                "EXCheckBox.CheckBox": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\ui\\EXRadioButton.js": {
            "name": "experJS\\ui\\EXRadioButton.js",
            "modules": {},
            "classes": {
                "EXRadioButton": 1,
                "EXRadioButton.RadioButton": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\ui\\EXScrollView.js": {
            "name": "experJS\\ui\\EXScrollView.js",
            "modules": {},
            "classes": {
                "EXScrollViewY": 1,
                "EXScrollViewY.UI_Bar": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\ui\\EXSelectBox.js": {
            "name": "experJS\\ui\\EXSelectBox.js",
            "modules": {},
            "classes": {
                "EXSelectBox": 1,
                "EXSelectBox.SelectBox": 1,
                "EXSelectBox.SelectBoxOptionGroup": 1,
                "EXSelectBox.SelectBoxOption": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\ui\\EXToast.js": {
            "name": "experJS\\ui\\EXToast.js",
            "modules": {},
            "classes": {
                "EXToast": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\ui\\EXValidator.js": {
            "name": "experJS\\ui\\EXValidator.js",
            "modules": {},
            "classes": {
                "EXValidator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\utils\\EXBrowser.js": {
            "name": "experJS\\utils\\EXBrowser.js",
            "modules": {},
            "classes": {
                "EXBrowser": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\utils\\EXCompare.js": {
            "name": "experJS\\utils\\EXCompare.js",
            "modules": {},
            "classes": {
                "EXCompare": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\utils\\EXCookie.js": {
            "name": "experJS\\utils\\EXCookie.js",
            "modules": {},
            "classes": {
                "EXCookie": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\utils\\EXElement.js": {
            "name": "experJS\\utils\\EXElement.js",
            "modules": {},
            "classes": {
                "EXElement": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\utils\\EXMath.js": {
            "name": "experJS\\utils\\EXMath.js",
            "modules": {},
            "classes": {
                "EXMath": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\utils\\EXString.js": {
            "name": "experJS\\utils\\EXString.js",
            "modules": {},
            "classes": {
                "EXString": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\utils\\EXTimer.js": {
            "name": "experJS\\utils\\EXTimer.js",
            "modules": {},
            "classes": {
                "EXTimer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "experJS\\vender\\CssQuery.js": {
            "name": "experJS\\vender\\CssQuery.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "experJS\\experJS.js": {
            "name": "experJS\\experJS.js",
            "modules": {},
            "classes": {
                "requirejs": 1,
                "require": 1,
                "define": 1,
                "EX": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "EXCustomEvent": {
            "name": "EXCustomEvent",
            "shortname": "EXCustomEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\events\\EXCustomEvent.js",
            "line": 3,
            "description": "커스텀 이벤트(CustomEvent) 객체.\n<br/>EXEvent 를 상속 받습니다.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "type",
                    "description": "이벤트 명.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "이벤트 객체를 통해 전달할 Object.",
                    "type": "Object"
                },
                {
                    "name": "bubble",
                    "description": "bubbling 여부.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "cancelable",
                    "description": "stopPropagation 가능 여부.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.include(\"events/EXCustomEvent\");\n\t\tEX.includeEnd();\n\n\n\t\tvar dispatchEventType = \"testEvent\";\n\t\tvar dispatchEventObject = {};\n\t\tEX.ready(function(){\n\t\t\tEXEventListener.add( dispatchEventObject , dispatchEventType , function(evt){\n\t\t\t\tEX.debug(\"dispatchEventObject\" , evt.type);\n\t\t\t});\n\t\t});\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar dispatchButton = document.getElementById(\"dispatchButton\");\n\t\t\tEXEventListener.add(dispatchButton , \"click\" , eventHandler);\n\t\t\tfunction eventHandler(evt){\n\t\t\t\tEX.debug(\"eventHandler\" , evt.type);\n\t\t\t\tEXEventListener.dispatch( dispatchEventObject , new EXCustomEvent(dispatchEventType, { passParam: 12}, true));\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t</head>\n\t<body>\n\t<div id=\"wrapper\">\n\t\t<button id=\"dispatchButton\">dispatchButton</button>\n\t</div>\n\t</body>\n\t</html>"
            ]
        },
        "EXEvent": {
            "name": "EXEvent",
            "shortname": "EXEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\events\\EXEvent.js",
            "line": 4,
            "description": "native 이벤트 객체를 EXEvent 에 맞게 가공합니다.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "evt",
                    "description": "이벤트 객체.",
                    "type": "Event || EventObject"
                }
            ]
        },
        "EXEventListener": {
            "name": "EXEventListener",
            "shortname": "EXEventListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\events\\EXEventListener.js",
            "line": 3,
            "static": 1
        },
        "EXJsonLoader": {
            "name": "EXJsonLoader",
            "shortname": "EXJsonLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\net\\EXJsonLoader.js",
            "line": 3,
            "description": "(EXLoader 를 상속 받습니다.)\n<br/>XML, TEXT 데이터를 load 할 수 있는 객체입니다.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "method",
                    "description": "HTTP Request 를 지정합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"GET\""
                },
                {
                    "name": "asynchronous",
                    "description": "비동기(true), 동기(false) 통신 방식을 지정합니다.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "EXLoader",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.include(\"net/EXLoader\");\n\t\tEX.include(\"net/EXJsonLoader\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\t\n\t\t\tvar _loaderTester = null;\n\t\t\t_loaderTester = new LoaderTester();\n\t\t\t_loaderTester.init();\n\n\t\t\tfunction LoaderTester(){\n\t\t\t\tvar _this = this;\n\t\t\t\tvar _jsonLoader = null;\n\t\t\t\t_this.init = function(){\n\t\t\t\t\tloaderInitialize();\n\t\t\t\t};\n\t\t\t\t_this.destroy = function(){\n\t\t\t\t};\n\t\t\t\tfunction loaderInitialize(){\n\t\t\t\t\tloaderDestroy();\n\t\t\t\t\t_jsonLoader = new EXJsonLoader();\n\t\t\t\t\t_jsonLoader.init();\n\t\t\t\t\tEXEventListener.add( _jsonLoader , EXLoader.EVENT_START , loaderHandler );\n\t\t\t\t\tEXEventListener.add( _jsonLoader , EXLoader.EVENT_PROGRESS , loaderHandler );\n\t\t\t\t\tEXEventListener.add( _jsonLoader , EXLoader.EVENT_COMPLETE , loaderHandler  );\n\t\t\t\t\tEXEventListener.add( _jsonLoader , EXLoader.EVENT_COMPLETE_ALL , loaderHandler );\n\t\t\t\t\tEXEventListener.add( _jsonLoader , EXLoader.EVENT_ERROR , loaderHandler );\n\t\t\t\t\t_jsonLoader.addURL(\"../../data/json/sample1.json\" , \"sampleJson1\");\n\t\t\t\t\t_jsonLoader.load();\n\t\t\t\t}\n\t\t\t\tfunction loaderHandler(evt){\n\t\t\t\t\tEX.debug(\"loaderHandler\" , evt.type);\n\t\t\t\t\tswitch(evt.type){\n\t\t\t\t\t\tcase EXLoader.EVENT_START :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_PROGRESS :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_COMPLETE :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_COMPLETE_ALL :\n\t\t\t\t\t\t\tEX.debug( evt.dataObject.sampleJson1);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_ERROR :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfunction loaderDestroy(){\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ]
        },
        "EXLoader": {
            "name": "EXLoader",
            "shortname": "EXLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\net\\EXLoader.js",
            "line": 18,
            "description": "<strong>(beta)</strong> 데이터를 load 할 수 있는 객체입니다.\n<br/>데이터를 추가(addURL)하여 여러개의 데이터를 순차적으로 받는것을 지원합니다.\n<br/>예제는 XmlLoader , ImageLoader 객체에서 참고하시기 바랍니다.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "method",
                    "description": "HTTP Request 방식을 지정합니다. (GET || HEAD || POST || PUT || DELETE || OPTION || TRACE)",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"GET\""
                },
                {
                    "name": "asynchronous",
                    "description": "비동기(true), 동기(false) 통신 방식을 지정합니다.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ]
        },
        "EXTextLoader": {
            "name": "EXTextLoader",
            "shortname": "EXTextLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\net\\EXTextLoader.js",
            "line": 3,
            "description": "(EXLoader를 상속 받습니다.)\n<br/>XML, TEXT 데이터를 load 할 수 있는 객체입니다.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "method",
                    "description": "HTTP Request 를 지정합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"GET\""
                },
                {
                    "name": "asynchronous",
                    "description": "비동기(true), 동기(false) 통신 방식을 지정합니다.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "Loader",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<link rel=\"stylesheet\" type=\"text/css\" href=\"\"/>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.include(\"net/EXLoader\");\n\t\tEX.include(\"net/EXTextLoader\");\n\t\tEX.include(\"transitions/EXTween\");\n\t\tEX.include(\"transitions/EXEasing\");\n\t\tEX.include(\"utils/EXElement\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar _loaderTester = null;\n\t\t\t_loaderTester = new LoaderTester();\n\t\t\t_loaderTester.init();\n\n\t\t\tfunction LoaderTester(){\n\t\t\t\tvar _this = this;\n\t\t\t\tvar _textLoader = null;\n\t\t\t\t_this.init = function(){\n\t\t\t\t\tloaderInitialize();\n\t\t\t\t};\n\t\t\t\t_this.destroy = function(){\n\t\t\t\t};\n\t\t\t\tfunction loaderInitialize(){\n\t\t\t\t\tloaderDestroy();\n\t\t\t\t\t_textLoader = new EXTextLoader();\n\t\t\t\t\t_textLoader.init();\n\t\t\t\t\tEXEventListener.add( _textLoader , EXLoader.EVENT_START , loaderHandler );\n\t\t\t\t\tEXEventListener.add( _textLoader , EXLoader.EVENT_PROGRESS , loaderHandler );\n\t\t\t\t\tEXEventListener.add( _textLoader , EXLoader.EVENT_COMPLETE , loaderHandler  );\n\t\t\t\t\tEXEventListener.add( _textLoader , EXLoader.EVENT_COMPLETE_ALL , loaderHandler );\n\t\t\t\t\tEXEventListener.add( _textLoader , EXLoader.EVENT_ERROR , loaderHandler );\n\t\t\t\t\t_textLoader.addURL(\"../../data/html/div1.html\" , \"div1\");\n\t\t\t\t\t_textLoader.load();\n\t\t\t\t}\n\t\t\t\tfunction loaderHandler(evt){\n\t\t\t\t\tEX.debug(\"loaderHandler\" , evt.type);\n\t\t\t\t\tswitch(evt.type){\n\t\t\t\t\t\tcase EXLoader.EVENT_START :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_PROGRESS :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_COMPLETE :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_COMPLETE_ALL :\n\t\t\t\t\t\t\tvar loadedHTML = evt.dataObject.div1;\n\t\t\t\t\t\t\tvar offset = EXElement.getLoadedHtmlOffset(loadedHTML);\n\t\t\t\t\t\t\tvar box1 = document.getElementById(\"box1\");\n\t\t\t\t\t\t\tbox1.innerHTML = loadedHTML;\n\t\t\t\t\t\t\tEXTween.to( box1 , 1 , { width: offset.width , height: offset.height , ease:EXEasing.easeOutQuart });\n\n\t\t\t\t\t\t\tvar sampleIframe = document.getElementById(\"sampleIframe\");\n\t\t\t\t\t\t\tsampleIframe.style.border = \"1px solid #ff0000\";\n\t\t\t\t\t\t\tsampleIframe.onload = function(){\n\t\t\t\t\t\t\t\tconsole.log(sampleIframe.offsetWidth);\n\t\t\t\t\t\t\t\tconsole.log(sampleIframe.offsetHeight);\n\t\t\t\t\t\t\t\tvar child = sampleIframe.contentWindow.document.body.children[0];\n\t\t\t\t\t\t\t\tconsole.log(child.offsetWidth);\n\t\t\t\t\t\t\t\tconsole.log(child.offsetHeight);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsampleIframe.src = \"../../index.html\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_ERROR :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfunction loaderDestroy(){\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t</head>\n\t<body>\n\t<div id=\"box1\" style=\"width:0px; height:0px; overflow:hidden;\">\n\t</div>\n\t<iframe id=\"sampleIframe\" src=\"\" style=\"padding:0; margin:0; border:none\"></iframe>\n\t</body>\n\t</html>"
            ]
        },
        "EXURLRequest": {
            "name": "EXURLRequest",
            "shortname": "EXURLRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\net\\EXURLRequest.js",
            "line": 2,
            "description": "Browser에서 지원하는 XMLHttpRequest 를 생성합니다.",
            "is_constructor": 1,
            "extends": "XMLHttpRequest",
            "return": {
                "description": "",
                "type": "XMLHttpRequest"
            }
        },
        "EXXmlLoader": {
            "name": "EXXmlLoader",
            "shortname": "EXXmlLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\net\\EXXmlLoader.js",
            "line": 3,
            "description": "(EXLoader를 상속 받습니다.)\n<br/>XML, TEXT 데이터를 load 할 수 있는 객체입니다.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "method",
                    "description": "HTTP Request 를 지정합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"GET\""
                },
                {
                    "name": "asynchronous",
                    "description": "비동기(true), 동기(false) 통신 방식을 지정합니다.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "extends": "Loader",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.include(\"net/EXLoader\");\n\t\tEX.include(\"net/EXXmlLoader\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\t\n\t\t\tvar _loaderTester = null;\n\t\t\t_loaderTester = new LoaderTester();\n\t\t\t_loaderTester.init();\n\n\t\t\tfunction LoaderTester(){\n\t\t\t\tvar _this = this;\n\t\t\t\tvar _xmlLoader = null;\n\t\t\t\t_this.init = function(){\n\t\t\t\t\tloaderInitialize();\n\t\t\t\t};\n\t\t\t\t_this.destroy = function(){\n\t\t\t\t};\n\t\t\t\tfunction loaderInitialize(){\n\t\t\t\t\tloaderDestroy();\n\t\t\t\t\t_xmlLoader = new EXXmlLoader();\n\t\t\t\t\t_xmlLoader.init();\n\t\t\t\t\tEXEventListener.add( _xmlLoader , EXLoader.EVENT_START , loaderHandler );\n\t\t\t\t\tEXEventListener.add( _xmlLoader , EXLoader.EVENT_PROGRESS , loaderHandler );\n\t\t\t\t\tEXEventListener.add( _xmlLoader , EXLoader.EVENT_COMPLETE , loaderHandler  );\n\t\t\t\t\tEXEventListener.add( _xmlLoader , EXLoader.EVENT_COMPLETE_ALL , loaderHandler );\n\t\t\t\t\tEXEventListener.add( _xmlLoader , EXLoader.EVENT_ERROR , loaderHandler );\n\t\t\t\t\t_xmlLoader.addURL(\"../../data/xml/sample.xml\" , \"sampleXML\");\n\t\t\t\t\t_xmlLoader.load();\n\t\t\t\t}\n\t\t\t\tfunction loaderHandler(evt){\n\t\t\t\t\tEX.debug(\"loaderHandler\" , evt.type);\n\t\t\t\t\tswitch(evt.type){\n\t\t\t\t\t\tcase EXLoader.EVENT_START :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_PROGRESS :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_COMPLETE :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_COMPLETE_ALL :\n\t\t\t\t\t\t\tEX.debug( evt.dataObject.sampleXML);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase EXLoader.EVENT_ERROR :\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfunction loaderDestroy(){\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ]
        },
        "EXEasing": {
            "name": "EXEasing",
            "shortname": "EXEasing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 3,
            "description": "EXTween 의 easing 과 관련된 함수를 제공합니다.",
            "static": 1
        },
        "EXTiming": {
            "name": "EXTiming",
            "shortname": "EXTiming",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 3,
            "description": "<strong>(beta)</strong> EXTiming 의 transform easing 과 관련된 함수(CSS String)를 제공합니다.",
            "static": 1
        },
        "EXTransform": {
            "name": "EXTransform",
            "shortname": "EXTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\transitions\\EXTransform.js",
            "line": 2,
            "static": 1
        },
        "EXTween": {
            "name": "EXTween",
            "shortname": "EXTween",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\transitions\\EXTween.js",
            "line": 2,
            "description": "HTMLElement, Numeric properties 의 tweening 을 위한 Tweener 입니다.\n<br/>사용법은 Flash ActionScript 로 유명한 <a href=\"http://www.greensock.com\" target=\"_blank\">greensock</a>의 TweenMax 와 거의 흡사합니다.\n<br/>(단, 비슷한건 Flash ActionScript 에서 사용하던 방식과 method name 정도 입니다.)\n<br/>\n<br/>모션 스크립트를 위해선 <strong>to</strong> 메소드를 먼저 보시는 것을 권장합니다.\n<br/>",
            "static": 1
        },
        "EXCheckBox": {
            "name": "EXCheckBox",
            "shortname": "EXCheckBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 16,
            "description": "Component checkbox 와 1:1로 대응하는 Design checkbox 를 생성합니다.",
            "static": 1
        },
        "EXCheckBox.CheckBox": {
            "name": "EXCheckBox.CheckBox",
            "shortname": "EXCheckBox.CheckBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 159,
            "description": "EXCheckBox.CheckBox 객체\noriginalCheckBox 한 개에 대응하는 designCheckBox 를 만들어 냅니다.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "EXRadioButton": {
            "name": "EXRadioButton",
            "shortname": "EXRadioButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 21,
            "description": "Component radio 와 1:1로 대응하는 Design radio 를 생성합니다.",
            "static": 1
        },
        "EXRadioButton.RadioButton": {
            "name": "EXRadioButton.RadioButton",
            "shortname": "EXRadioButton.RadioButton",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 221,
            "description": "RadioButton 객체.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "EXScrollViewY": {
            "name": "EXScrollViewY",
            "shortname": "EXScrollViewY",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 27,
            "is_constructor": 1
        },
        "EXScrollViewY.UI_Bar": {
            "name": "EXScrollViewY.UI_Bar",
            "shortname": "EXScrollViewY.UI_Bar",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 347,
            "description": "EXScrollViewY 에 사용되는 스크롤 Bar UI",
            "is_constructor": 1
        },
        "EXSelectBox": {
            "name": "EXSelectBox",
            "shortname": "EXSelectBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 33,
            "description": "Component select 와 1:1로 대응하는 Design select 를 생성합니다.",
            "static": 1
        },
        "EXSelectBox.SelectBox": {
            "name": "EXSelectBox.SelectBox",
            "shortname": "EXSelectBox.SelectBox",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 250,
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "EXSelectBox.SelectBoxOptionGroup": {
            "name": "EXSelectBox.SelectBoxOptionGroup",
            "shortname": "EXSelectBox.SelectBoxOptionGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 520,
            "description": "originalSelectBox 의 optionGroup 역할을 하는 객체.\n실제로는 originalSelectBox 에 group 태그는 존재하지 않지만,\noption 의 scroll , open , close 등의 group 기능이 요구됨에 따라 정의된 객체입니다.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "EXSelectBox.SelectBoxOption": {
            "name": "EXSelectBox.SelectBoxOption",
            "shortname": "EXSelectBox.SelectBoxOption",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 680,
            "description": "originalSelectBox 의 option 역할을 하는 객체.",
            "access": "private",
            "tagname": "",
            "is_constructor": 1
        },
        "EXToast": {
            "name": "EXToast",
            "shortname": "EXToast",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXToast.js",
            "line": 5,
            "is_constructor": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"ui/EXToast\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar showToastBtn = document.getElementById(\"showToastBtn\");\n\t\t\tvar showMessage = document.getElementById(\"showMessage\");\n\n\t\t\tshowToastBtn.onclick = function(evt){\n\t\t\t\tEXToast.message( showMessage.value );\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t<style type=\"text/css\">\n\tbody { font-family:\"돋움\"; font-size:0.8em; }\n\t</style>\n\n\t</head>\n\t<body>\n\t\t<input id=\"showMessage\" type=\"text\" />\n\t\t<button id=\"showToastBtn\">showToastBtn</button>\n\t</body>\n\t</html>"
            ]
        },
        "EXValidator": {
            "name": "EXValidator",
            "shortname": "EXValidator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\ui\\EXValidator.js",
            "line": 6,
            "description": "HTML input 객체의 type 별 검수를 합니다.",
            "is_constructor": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../experJS\");\n\t\tEX.include(\"ui/EXValidator\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar messageChange = true;\n\t\t\tif(messageChange == true){\n\t\t\t\tEXValidator.message.ENG_ONLY\t\t\t\t\t\t\t= \"영문 <span class=\\\"exValidateA\\\">입력만 가능합니다.</span>\";\n\t\t\t\tEXValidator.message.ENG_LOW_ONLY\t\t\t\t= \"영문 소문자 <span class=\\\"exValidateA\\\">입력만 가능합니다.</span>\";\n\t\t\t\tEXValidator.message.ENG_UPER_ONLY\t\t\t\t= \"영문 대문자 <span class=\\\"exValidateA\\\">입력만 가능합니다.</span>\";\n\t\t\t\tEXValidator.message.NUM_ONLY\t\t\t\t\t\t\t= \"숫자 <span class=\\\"exValidateA\\\">입력만 가능합니다.</span>\";\n\t\t\t\tEXValidator.message.ENG_NUM_ONLY\t\t\t\t= \"영문 또는 숫자 <span class=\\\"exValidateA\\\">입력만 가능합니다.</span>\";\n\t\t\t\tEXValidator.message.ENG_LOW_NUM_ONLY\t\t= \"영문 소문자 또는 숫자 <span class=\\\"exValidateA\\\">입력만 가능합니다.</span>\";\n\t\t\t\tEXValidator.message.ENG_UPER_NUM_ONLY\t\t= \"영문 대문자 또는 숫자 <span class=\\\"exValidateA\\\">입력만 가능합니다.</span>\";\n\t\t\t}\n\t\t\tEXValidator.initInputType();\n\t\t});\n\t})();\n\t</script>\n\n\t<style type=\"text/css\">\n\tbody { font-family:\"돋움\"; font-size:0.8em; }\n\t.exValidateA { color:#bbbbbb; }\n\t</style>\n\n\t</head>\n\t<body>\n\t\t<div>\n\t\t\t<br/><input data-experJS=\"inputType:eng\" type=\"text\" /> <span>eng</span>\n\t\t\t<br/><input data-experJS=\"inputType:engLow\" type=\"text\" /> <span>engLow</span>\n\t\t\t<br/><input data-experJS=\"inputType:engUper\" type=\"text\" /> <span>engUper</span>\n\t\t\t<br/><input data-experJS=\"inputType:eng,num\" type=\"text\" /> <span>eng,num</span>\n\t\t\t<br/><input data-experJS=\"inputType:engLow,num\" type=\"text\" /> <span>engLow,num</span>\n\t\t\t<br/><input data-experJS=\"inputType:engUper,num\" type=\"text\" /> <span>engUper,num</span>\n\t\t\t<br/><input data-experJS=\"inputType:num\" type=\"text\" /> <span>num</span>\n\t\t</div>\n\t</body>\n\t</html>"
            ]
        },
        "EXBrowser": {
            "name": "EXBrowser",
            "shortname": "EXBrowser",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 3,
            "static": 1
        },
        "EXCompare": {
            "name": "EXCompare",
            "shortname": "EXCompare",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\utils\\EXCompare.js",
            "line": 2,
            "static": 1
        },
        "EXCookie": {
            "name": "EXCookie",
            "shortname": "EXCookie",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\utils\\EXCookie.js",
            "line": 9,
            "description": "Cookie 와 관련된 Utility를 갖는 객체입니다.",
            "static": 1
        },
        "EXElement": {
            "name": "EXElement",
            "shortname": "EXElement",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\utils\\EXElement.js",
            "line": 2,
            "static": 1
        },
        "EXMath": {
            "name": "EXMath",
            "shortname": "EXMath",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\utils\\EXMath.js",
            "line": 3,
            "static": 1
        },
        "EXString": {
            "name": "EXString",
            "shortname": "EXString",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\utils\\EXString.js",
            "line": 2,
            "static": 1
        },
        "EXTimer": {
            "name": "EXTimer",
            "shortname": "EXTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\utils\\EXTimer.js",
            "line": 3,
            "description": "setTimeout 을 보다 쉽게 사용하기 위한 객체입니다.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "timeoutNum",
                    "description": "타이머가 호출되는 시간(1000 = 1초)",
                    "type": "Number"
                },
                {
                    "name": "cnt",
                    "description": "타이머가 실행될 총 횟수.",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXTimer\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tvar timer = new EXTimer(1000 , 3);\n\t\t\ttimer.addListener(EXTimer.EVENT_TIMER , timerEventHandler);\n\t\t\ttimer.addListener(EXTimer.EVENT_TIMER_COMPLETE , timerEventCompleteHandler);\n\n\t\t\tfunction timerEventHandler(){\n\t\t\t\tEX.debug(\"timer :\" , timer.count());\n\t\t\t}\n\t\t\tfunction timerEventCompleteHandler(){\n\t\t\t\tEX.debug(\"complete :\" , timer.countAll());\n\t\t\t\ttoggleTimer();\n\t\t\t}\n\n\t\t\tvar btn = document.getElementById(\"btn\");\n\t\t\tvar isStart = false;\n\t\t\tbtn.onclick = toggleTimer;\n\t\t\tfunction toggleTimer(){\n\t\t\t\tif(isStart == true){\n\t\t\t\t\tEX.debug(\"timer stop\");\n\t\t\t\t\ttimer.stop();\n\t\t\t\t}else{\n\t\t\t\t\tEX.debug(\"timer start\");\n\t\t\t\t\ttimer.start();\n\t\t\t\t}\n\t\t\t\tisStart = !isStart;\n\t\t\t}\n\t\t});\n\t</script>\n\t</head>\n\t<body>\n\t<button id=\"btn\">start&stop toggle</button>\n\t</body>\n\t</html>"
            ]
        },
        "requirejs": {
            "name": "requirejs",
            "shortname": "requirejs",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\experJS.js",
            "line": 7,
            "description": "javascript module loader\n<br/><a href=\"http://requirejs.org/\" target=\"_blank\">http://requirejs.org/</a>"
        },
        "require": {
            "name": "require",
            "shortname": "require",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\experJS.js",
            "line": 13,
            "description": "javascript module loader\n<br/><a href=\"http://requirejs.org/\" target=\"_blank\">http://requirejs.org/</a>"
        },
        "define": {
            "name": "define",
            "shortname": "define",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\experJS.js",
            "line": 19,
            "description": "javascript module loader\n<br/><a href=\"http://requirejs.org/\" target=\"_blank\">http://requirejs.org/</a>"
        },
        "EX": {
            "name": "EX",
            "shortname": "EX",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "experJS\\experJS.js",
            "line": 57,
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "experJS\\events\\EXCustomEvent.js",
            "line": 73,
            "description": "event 객체의 bubbling 을 제어하는 속성입니다.",
            "itemtype": "property",
            "name": "isBubble",
            "type": "{boolean}",
            "class": "EXCustomEvent"
        },
        {
            "file": "experJS\\events\\EXCustomEvent.js",
            "line": 80,
            "description": "event 객체의 stopPropagation (이벤트 전파 중지) 를 제어하는 속성입니다.",
            "itemtype": "property",
            "name": "isCancelable",
            "type": "{boolean}",
            "class": "EXCustomEvent"
        },
        {
            "file": "experJS\\events\\EXCustomEvent.js",
            "line": 87,
            "description": "CustomEvent 를 dispatchEvent 를 통해 전달시 데이터를 전달할 수 있는 Object 타입의 데이터 묶음 입니다.",
            "itemtype": "property",
            "name": "dataObject",
            "type": "{Object}",
            "class": "EXCustomEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 14,
            "description": "mouse wheel 의 delta 값을 반환합니다.",
            "itemtype": "property",
            "name": "delta",
            "type": "{Integer}",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<style type=\"text/css\">\n\t\thtml , body { padding:0; margin:0; }\n\t\t#testBox1 { position:absolute; width:200px; height:200px; border:0px solid #000000; background-color:#ffff00; }\n\t</style>\n\t<script type=\"text/javascript\" src=\"../../vw/events/EventVW_0.9.0.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"testBox1\">Mouse Wheel</div>\n\t</body>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tvar testBox1 = document.getElementById(\"testBox1\");\n\t\t\n\t\tEventVW.addListener( testBox1 , \"mousewheel\" , wheelEventHandler);\n\t\tfunction wheelEventHandler(evt){\n\t\t\talert(evt.delta);\n\t\t}\n\t})();\n\t</script>\n\t</html>"
            ],
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 45,
            "description": "touchstart 부터 touchmove(touchend) 까지 X축의 움직인 거리를 반환합니다. \n<br/>(See also : EventVW.setTouchAble)",
            "itemtype": "property",
            "name": "touchMoveX",
            "type": "{Integer}",
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 53,
            "description": "touchstart 부터 touchmove(touchend) 까지 Y축의 움직인 거리를 반환합니다. \n<br/>(See also : EventVW.setTouchAble)",
            "itemtype": "property",
            "name": "touchMoveY",
            "type": "{Integer}",
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 61,
            "description": "touchend 시 X축 swipe 방향을 반환합니다. (-1: 오른쪽에서 왼쪽으로 swipe , 0: x축 움직임 없음으로 판단 , 1:왼쪽에서 오른쪽으로 swipe ) \n<br/>(See also : EventVW.setTouchAble , EventVW.setTouchDistanceX)",
            "itemtype": "property",
            "name": "touchDirectionX",
            "type": "{Integer}",
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 69,
            "description": "touchend 시 Y축 swipe 방향을 반환합니다. (-1: 아래쪽에서 위쪽으로 swipe , 0: y축 움직임 없음으로 판단 , 1:위쪽에서 아래쪽으로 swipe ) \n<br/>(See also : EventVW.setTouchAble , EventVW.setTouchDistanceY)",
            "itemtype": "property",
            "name": "touchDirectionY",
            "type": "{Integer}",
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 80,
            "description": "이벤트 전파를 정지합니다.",
            "itemtype": "method",
            "name": "stopPropagation",
            "type": "{Function}",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<style type=\"text/css\">\n\t\thtml , body { padding:0; margin:0; }\n\t\t.box { position:absolute; top:80px; left:50px; width:400px; height:200px; color:#ffffff; }\n\t\t#box1 { background-color:#ff0000; }\n\t\t#box2 { background-color:#83b535; }\n\t\t#box3 { background-color:#0000ff; }\n\t\t#box4 { background-color:#ab6ed2; }\n\t</style>\n\t<script type=\"text/javascript\" src=\"../../vw/events/EventVW_0.9.0.js\"></script>\n\t</head>\n\t<body>\n\t\t<button id=\"btnDispatch\" style=\"padding:5px; font-weight:800;\">dispatchEvent!!</button>\n\t\t\n\t\t<button onclick=\"example.toggleStopPropagation()\" style=\"padding:5px; font-weight:800;\">toggleStopPropagation</button>\n\n\t\t<div id=\"box1\" class=\"box\">grandfather box1\n\t\t\t<div id=\"box2\" class=\"box\">father box2\n\t\t\t\t<div id=\"box3\" class=\"box\">me box3\n\t\t\t\t\t<div id=\"box4\" class=\"box\">sun box4</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t<script type=\"text/javascript\">\n\tvar example = {};\n\t(function(){\n\t\tvar TEST_CUSTOM_EVENT = \"TEST_CUSTOM_EVENT\";\n\n\t\tvar isStopPropagation = false;\n\n\t\tvar boxArr = [];\n\t\tvar box = null;\n\t\tfor(var i = 0 ; i < 4 ; i++){\n\t\t\tbox = document.getElementById(\"box\"+(i+1));\n\t\t\tEventVW.addListener(box , TEST_CUSTOM_EVENT , eventHandler);\n\t\t\tboxArr.push(box);\n\t\t}\n\t\t\n\t\tvar btnDispatch = document.getElementById(\"btnDispatch\");\n\t\tEventVW.addListener( btnDispatch , \"click\" , function(evt){\n\t\t\tEventVW.dispatchEvent(boxArr[3] , new EventVW.CustomEvent(TEST_CUSTOM_EVENT ));\n\t\t});\n\n\t\tfunction eventHandler(evt){\n\t\t\tswitch(evt.type){\n\t\t\t\tcase TEST_CUSTOM_EVENT :\n\t\t\t\t\tif(evt.dispatchTarget) alert(evt.dispatchTarget.id);\n\t\t\t\t\tif(isStopPropagation == true) evt.stopPropagation(); // 이벤트 전파 정지\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\texample.toggleStopPropagation = function(){\n\t\t\tisStopPropagation = !isStopPropagation;\n\t\t\talert(\"stopPropagation : \" + isStopPropagation);\n\t\t}\n\t\texample.toggleStopPropagation();\n\t})();\n\t</script>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 157,
            "description": "기본 event 동작을 막습니다.",
            "itemtype": "method",
            "name": "preventDefault",
            "type": "{Function}",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<style type=\"text/css\">\n\t\thtml , body { padding:0; margin:0; }\n\t\t.box { position:absolute; top:50px; left:50px; width:400px; height:200px; color:#ffffff; }\n\t\t#box1 { background-color:#ff0000; }\n\t\t#box2 { background-color:#83b535; }\n\t\t#box3 { background-color:#0000ff; }\n\t\t#box4 { background-color:#ab6ed2; }\n\t</style>\n\t<script type=\"text/javascript\" src=\"../../vw/events/EventVW_0.9.0.js\"></script>\n\t</head>\n\t<body>\n\t\t<br/><br/>\n\t\t<a id=\"btn\" href=\"http://js.v-w.kr\" target=\"_blank\"><strong>LINK CLICK!!</strong></a>\n\t\t<br/><br/>\n\t\t<button onclick=\"example.togglePreventDefault()\">togglePreventDefault</button>\n\t\t\n\t<script type=\"text/javascript\">\n\tvar example = {};\n\t(function(){\n\t\tvar btn = document.getElementById(\"btn\");\n\t\tvar isPreventDefault = false;\n\n\t\tEventVW.addListener(btn , \"click\" , function(evt){\n\t\t\tif(isPreventDefault == true) evt.preventDefault(); // 기본 event 속성을 막습니다.\n\t\t});\n\t\t\n\t\texample.togglePreventDefault = function(evt){\n\t\t\tisPreventDefault = !isPreventDefault;\n\t\t\talert(\"event preventDefault : \" + isPreventDefault);\n\t\t}\n\t\texample.togglePreventDefault();\n\t})();\n\t</script>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 208,
            "description": "loader 와 관련된 로드된 byte 값.",
            "itemtype": "property",
            "name": "bytesLoaded",
            "default": "null",
            "type": "{Integer}",
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 216,
            "description": "loader 와 관련된 로드될 byte 의 총 값.",
            "itemtype": "property",
            "name": "bytesTotal",
            "default": "null",
            "type": "{Integer}",
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEvent.js",
            "line": 224,
            "description": "loader 와 관련하여 총 로드될 byte 값과 로드된 byte 값의 percentage 값.[0~1]",
            "itemtype": "property",
            "name": "bytesPercent",
            "default": "null",
            "type": "{Number}",
            "class": "EXEvent"
        },
        {
            "file": "experJS\\events\\EXEventListener.js",
            "line": 28,
            "description": "EXEvent 가 지원하는 event type 배열입니다. \n<br/>Browser, device 에서 지원하는 System event가 추가될 시 해당 속성을 변경(추가)할 필요가 있습니다.\n<br/>\n<br/>예를 들어 touchstart 라는 System event가 발생하는 새로운 device에서 EventVW 를 사용할 경우, \n<br/>EventVW.nativeEvent 배열의 요소에 \"touchstart\"가 없다면 EventVW.nativeEvent 에 \"touchstart\" 요소를 추가하여야 합니다.\n<br/>\n<br/>해당 속성은 IE와 NB의 System event type 을 통합하기 위해(IE의 경우 \"onclick\" , NB의 경우 \"click\"과 같이 사용하는 문제해결) 단순히 event type 을 나열한 배열입니다.",
            "itemtype": "attribute",
            "name": "nativeEvents",
            "type": "{Array}",
            "class": "EXEventListener"
        },
        {
            "file": "experJS\\events\\EXEventListener.js",
            "line": 53,
            "description": "이벤트 리스닝을 추가합니다.",
            "itemtype": "method",
            "name": "add",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "이벤트 리스닝을 하는 타겟.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "이벤트 명.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "이벤트 콜백 함수.",
                    "type": "Function"
                },
                {
                    "name": "capture",
                    "description": "true 로 설정시 이벤트를 capture 한다.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\n\t\t\tvar testButton1 = document.getElementById(\"testButton1\");\n\t\t\tEXEventListener.add(testButton1 , \"click\" , eventHandler);\n\n\t\t\tfunction eventHandler(evt){\n\t\t\t\tEX.debug(\"eventHandler\" , evt.type);\n\t\t\t\tEX.debug(\"has listener : \" , EXEventListener.has(testButton1 , \"click\" , eventHandler));\n\t\t\t\tEXEventListener.remove(testButton1 , \"click\" , eventHandler);\n\t\t\t\tEX.debug(\"has listener : \" , EXEventListener.has(testButton1 , \"click\" , eventHandler));\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t</head>\n\t<body>\n\t\t<button id=\"testButton1\">testButton1</button>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "이벤트 등록이 될 경우 true , 등록이 되지 않을 경우 false 를 반환합니다.",
                "type": "Boolean"
            },
            "class": "EXEventListener"
        },
        {
            "file": "experJS\\events\\EXEventListener.js",
            "line": 123,
            "description": "지정된 객체에 이벤트 동일한 리스너가 바인딩 되어 있는지 확인 합니다.",
            "itemtype": "method",
            "name": "has",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "이벤트 리스닝을 하는 타겟.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "이벤트 명.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "이벤트 콜백 함수.",
                    "type": "Function"
                },
                {
                    "name": "capture",
                    "description": "true 로 설정시 이벤트를 capture 한다.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\n\t\t\tvar testButton1 = document.getElementById(\"testButton1\");\n\t\t\tEXEventListener.add(testButton1 , \"click\" , eventHandler);\n\n\t\t\tfunction eventHandler(evt){\n\t\t\t\tEX.debug(\"eventHandler\" , evt.type);\n\t\t\t\tEX.debug(\"has listener : \" , EXEventListener.has(testButton1 , \"click\" , eventHandler));\n\t\t\t\tEXEventListener.remove(testButton1 , \"click\" , eventHandler);\n\t\t\t\tEX.debug(\"has listener : \" , EXEventListener.has(testButton1 , \"click\" , eventHandler));\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t</head>\n\t<body>\n\t\t<button id=\"testButton1\">testButton1</button>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXEventListener"
        },
        {
            "file": "experJS\\events\\EXEventListener.js",
            "line": 184,
            "description": "이벤트 리스닝을 삭제합니다.\n<br/>add 에 등록되어 있는 모든 조건과 동일해야 삭제가 가능합니다.",
            "itemtype": "method",
            "name": "remove",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "이벤트 리스닝을 하는 타겟.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "이벤트 명.",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "이벤트 콜백 함수.",
                    "type": "Function"
                },
                {
                    "name": "capture",
                    "description": "true 로 설정시 이벤트를 capture 한다.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\n\t\t\tvar testButton1 = document.getElementById(\"testButton1\");\n\t\t\tEXEventListener.add(testButton1 , \"click\" , eventHandler);\n\n\t\t\tfunction eventHandler(evt){\n\t\t\t\tEX.debug(\"eventHandler\" , evt.type);\n\t\t\t\tEX.debug(\"has listener : \" , EXEventListener.has(testButton1 , \"click\" , eventHandler));\n\t\t\t\tEXEventListener.remove(testButton1 , \"click\" , eventHandler);\n\t\t\t\tEX.debug(\"has listener : \" , EXEventListener.has(testButton1 , \"click\" , eventHandler));\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t</head>\n\t<body>\n\t\t<button id=\"testButton1\">testButton1</button>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXEventListener"
        },
        {
            "file": "experJS\\events\\EXEventListener.js",
            "line": 272,
            "description": "커스텀 이벤트를 dispatch 합니다.\n<br/>See also : EXCustomEvent",
            "itemtype": "method",
            "name": "dispatch",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "이벤트 리스닝을 하는 타겟.",
                    "type": "Object"
                },
                {
                    "name": "evt",
                    "description": "커스텀 이벤트 객체(EXCustomEvent)"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.include(\"events/EXCustomEvent\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\n\t\t\tvar dispatchEventType = \"testEvent\";\n\t\t\tvar dispatchButton = document.getElementById(\"dispatchButton\");\n\t\t\tvar wrapper = document.getElementById(\"wrapper\");\n\t\t\tEXEventListener.add(dispatchButton , \"click\" , eventHandler);\n\t\t\tEXEventListener.add(dispatchButton , dispatchEventType , catchedEventHandler);\n\t\t\tEXEventListener.add(wrapper , dispatchEventType , catchedEventHandler);\n\t\t\tEXEventListener.add(document , dispatchEventType , catchedEventHandler);\n\n\t\t\tfunction eventHandler(evt){\n\t\t\t\tEX.debug(\"eventHandler\" , evt.type);\n\t\t\t\tEXEventListener.dispatch( evt.currentTarget , new EXCustomEvent(dispatchEventType, { passParam: 12}, true));\n\t\t\t\t//bubbling\n\t\t\t\t//EXEventListener.dispatch( evt.currentTarget , new EXCustomEvent(dispatchEventType, { passParam: 12}, true));\n\t\t\t\t\n\t\t\t}\n\t\t\tfunction catchedEventHandler(evt){\n\t\t\t\tEX.debug(\"catchedEventHandler\" , evt.type);\n\t\t\t\tEX.debug(evt.dispatchTarget);\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t</head>\n\t<body>\n\t<div id=\"wrapper\">\n\t\t<button id=\"dispatchButton\">dispatchButton</button>\n\t</div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXEventListener"
        },
        {
            "file": "experJS\\events\\EXEventListener.js",
            "line": 363,
            "description": "touch event 시 touch 관련 속성을 분석하여 event 객체에 바인딩합니다. (기본 touchstart, touchmove , touchend 이벤트를 사용하는 것과는 상관없습니다.)\n<br/>\n<br/><strong>touchMoveX</strong> : touchstart 부터 touchmove(touchend) 까지 X축의 움직인 거리를 반환합니다.\n<br/><strong>touchMoveY</strong> : touchstart 부터 touchmove(touchend) 까지 X축의 움직인 거리를 반환합니다.\n<br/><strong>touchDirectionX</strong> : touchend 시 X축 swipe 방향을 반환합니다. (-1: 오른쪽에서 왼쪽으로 swipe , 0: x축 움직임 없음으로 판단 , 1:왼쪽에서 오른쪽으로 swipe )\n<br/><strong>touchDirectionY</strong> : touchend 시 Y축 swipe 방향을 반환합니다. (-1: 아래쪽에서 위쪽으로 swipe , 0: y축 움직임 없음으로 판단 , 1:위쪽에서 아래쪽으로 swipe )\n<br/>",
            "itemtype": "method",
            "name": "setTouchAble",
            "static": 1,
            "params": [
                {
                    "name": "bool",
                    "description": "touch event 의 touch",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXEventListener"
        },
        {
            "file": "experJS\\events\\EXEventListener.js",
            "line": 380,
            "description": "touchMoveX , touchMoveY , touchDirectionX , touchDirectionY 속성을 사용 가능한지 확인합니다.\n<br/>See also : setTouchAble",
            "itemtype": "method",
            "name": "isTouchAble",
            "static": 1,
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXEventListener"
        },
        {
            "file": "experJS\\events\\EXEventListener.js",
            "line": 391,
            "description": "touchDirectionX(x축 swipe 방향 판단)의 기준 거리를 지정합니다.\n<br/>See also : setTouchAble",
            "itemtype": "method",
            "name": "setTouchDistanceX",
            "static": 1,
            "params": [
                {
                    "name": "distance",
                    "description": "거리값",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXEventListener"
        },
        {
            "file": "experJS\\events\\EXEventListener.js",
            "line": 403,
            "description": "touchDirectionY(y축 swipe 방향 판단)의 기준 거리를 지정합니다.\n<br/>See also : setTouchAble",
            "itemtype": "method",
            "name": "setTouchDistanceY",
            "static": 1,
            "params": [
                {
                    "name": "distance",
                    "description": "거리값",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXEventListener"
        },
        {
            "file": "experJS\\net\\EXJsonLoader.js",
            "line": 92,
            "description": "<strong>override</strong>",
            "itemtype": "method",
            "name": "stateComplete",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXJsonLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 41,
            "description": "cache 를 사용할지 여부를 지정합니다.",
            "itemtype": "method",
            "name": "setCache",
            "params": [
                {
                    "name": "cache",
                    "description": "cache 를 사용할지 여부를 지정합니다.",
                    "type": "Boolean"
                }
            ],
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 55,
            "description": "통신 방식을 지정합니다.",
            "itemtype": "method",
            "name": "setMethod",
            "params": [
                {
                    "name": "method",
                    "description": "HTTP Request 방식을 지정합니다. (GET || HEAD || POST || PUT || DELETE || OPTION || TRACE)",
                    "type": "String"
                }
            ],
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 65,
            "description": "비동기, 동기 방식을 지정합니다.",
            "itemtype": "method",
            "name": "setAsynchronous",
            "params": [
                {
                    "name": "asynchronous",
                    "description": "{boolean} 비동기(true), 동기(false) 통신 방식을 지정합니다.",
                    "type": "Boolean"
                }
            ],
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 80,
            "description": "Loader 객체를 초기화 합니다.",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 158,
            "description": "load 할 데이터의 URL과 id를 지정합니다.\n<br/>메소드 명에서 알 수 있듯 하나의 Loader 객체로 부터 여러개의 데이터를 추가하여 load 할 수 있습니다.\n<br/>id 는 Loader 객체로 부터 로드가 완료된 후 데이터를 전달 받기 위해 필요합니다.",
            "itemtype": "method",
            "name": "addURL",
            "params": [
                {
                    "name": "url",
                    "description": "데이터 URL",
                    "type": "String"
                },
                {
                    "name": "id",
                    "description": "데이터 id (데이터 id는 Loader 객체로 부터 데이터를 전달 받을 때 사용합니다.)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 173,
            "description": "XMLHttpRequest 를 통해 전달할 파라미터를 지정합니다.",
            "itemtype": "method",
            "name": "setParams",
            "params": [
                {
                    "name": "paramsObj",
                    "description": "XMLHttpRequest 를 통해 전달할 파라미터",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 196,
            "description": "load 를 시작합니다.",
            "itemtype": "method",
            "name": "load",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 228,
            "description": "Loader 객체에서 사용된 모든 자원을 해제합니다.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 261,
            "description": "Loader 객체의 load 가 시작되는 시점에 dispatch 합니다.",
            "itemtype": "event",
            "name": "Loader.EVENT_START",
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 267,
            "description": "Loader 객체의 addURL 을 통해 추가된 개별 데이터를 로드 완료되는 시점에 dispatch 합니다.",
            "itemtype": "event",
            "name": "Loader.EVENT_COMPLETE",
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 273,
            "description": "비동기 통신방식으로 생성된 Loader 객체의 데이터 progress 시점에 dispatch 합니다.\n<br/>loadedByte 등은 지원하지 않습니다.",
            "itemtype": "event",
            "name": "Loader.EVENT_PROGRESS",
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 280,
            "description": "Loader 객체의 addURL 을 통해 추가된 모든 데이터를 로드 완료되는 시점에 dispatch 합니다.",
            "itemtype": "event",
            "name": "Loader.EVENT_COMPLETE_ALL",
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXLoader.js",
            "line": 286,
            "description": "Loader 객체에서 error 가 발생하는 시점에 dispatch 합니다.",
            "itemtype": "event",
            "name": "Loader.EVENT_ERROR",
            "class": "EXLoader"
        },
        {
            "file": "experJS\\net\\EXTextLoader.js",
            "line": 113,
            "description": "<strong>override</strong>",
            "itemtype": "method",
            "name": "stateComplete",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTextLoader"
        },
        {
            "file": "experJS\\net\\EXXmlLoader.js",
            "line": 92,
            "description": "<strong>override</strong>",
            "itemtype": "method",
            "name": "stateComplete",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXXmlLoader"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 10,
            "itemtype": "method",
            "name": "easeInQuad",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 16,
            "itemtype": "method",
            "name": "easeOutQuad",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 22,
            "itemtype": "method",
            "name": "easeInOutQuad",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 31,
            "itemtype": "method",
            "name": "easeInCubic",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 37,
            "itemtype": "method",
            "name": "easeOutCubic",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 43,
            "itemtype": "method",
            "name": "easeInOutCubic",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 52,
            "itemtype": "method",
            "name": "easeInQuart",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 58,
            "itemtype": "method",
            "name": "easeOutQuart",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 64,
            "itemtype": "method",
            "name": "easeInOutQuart",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 73,
            "itemtype": "method",
            "name": "easeInQuint",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 79,
            "itemtype": "method",
            "name": "easeOutQuint",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 85,
            "itemtype": "method",
            "name": "easeInOutQuint",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 94,
            "itemtype": "method",
            "name": "easeInSine",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 100,
            "itemtype": "method",
            "name": "easeOutSine",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 106,
            "itemtype": "method",
            "name": "easeInOutSine",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 112,
            "itemtype": "method",
            "name": "easeInExpo",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 118,
            "itemtype": "method",
            "name": "easeOutExpo",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 124,
            "itemtype": "method",
            "name": "easeInOutExpo",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 135,
            "itemtype": "method",
            "name": "easeInCirc",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 141,
            "itemtype": "method",
            "name": "easeOutCirc",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 147,
            "itemtype": "method",
            "name": "easeInOutCirc",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 156,
            "itemtype": "method",
            "name": "easeInElastic",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 168,
            "itemtype": "method",
            "name": "easeOutElastic",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 180,
            "itemtype": "method",
            "name": "easeInOutElastic",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 193,
            "itemtype": "method",
            "name": "easeInBack",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 202,
            "itemtype": "method",
            "name": "easeOutBack",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 211,
            "itemtype": "method",
            "name": "easeInOutBack",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 221,
            "itemtype": "method",
            "name": "easeInBounce",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 229,
            "itemtype": "method",
            "name": "easeOutBounce",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXEasing.js",
            "line": 245,
            "itemtype": "method",
            "name": "easeInOutBounce",
            "static": 1,
            "class": "EXEasing"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 9,
            "itemtype": "property",
            "name": "ease",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 16,
            "itemtype": "property",
            "name": "linear",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 23,
            "itemtype": "property",
            "name": "easeIn",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 30,
            "itemtype": "property",
            "name": "easeOut",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 37,
            "itemtype": "property",
            "name": "easeInOut",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 44,
            "itemtype": "property",
            "name": "forkIn",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 51,
            "itemtype": "property",
            "name": "forkOut",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 58,
            "itemtype": "property",
            "name": "forkInOut",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 65,
            "itemtype": "property",
            "name": "cutterIn",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 72,
            "itemtype": "property",
            "name": "cutterOut",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTiming.js",
            "line": 79,
            "itemtype": "property",
            "name": "cutterInOut",
            "type": "{String}",
            "static": 1,
            "final": 1,
            "class": "EXTiming"
        },
        {
            "file": "experJS\\transitions\\EXTransform.js",
            "line": 113,
            "description": "지정된 tweenObject 에 중심점을 변경합니다.",
            "itemtype": "method",
            "name": "origin",
            "static": 1,
            "params": [
                {
                    "name": "tweenObject",
                    "description": "속성을 부여할 객체.",
                    "type": "HTMLElement"
                },
                {
                    "name": "xAxis",
                    "description": "X축 좌표.",
                    "type": "String || Number"
                },
                {
                    "name": "yAxis",
                    "description": "Y축 좌표.",
                    "type": "String || Number"
                },
                {
                    "name": "zAxis",
                    "description": "Z축 좌표.",
                    "type": "String || Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTransform"
        },
        {
            "file": "experJS\\transitions\\EXTransform.js",
            "line": 135,
            "description": "<strong>(beta)</strong> CSS3 속성중 transition(transform) 과 관련된 속성을 사용하기 위한 tweener 입니다.\n<br/>",
            "itemtype": "method",
            "name": "to",
            "static": 1,
            "params": [
                {
                    "name": "tweenObject",
                    "description": "tween target object.",
                    "type": "HTMLElement"
                },
                {
                    "name": "speed",
                    "description": "tween speed.",
                    "type": "Nubmber"
                },
                {
                    "name": "tweenProperty",
                    "description": "Style property of HTMLElement and number property of Object.\n\t<div>\n\t\t<h6 style=\"color:#66bbcc;\">[[ Support property ]]</h6>\n\t\t<strong>css3 property of HTMLElement</strong>\n\t\t<ul>\n\t\t\t<li>translate3d , translate , translateX , translateY</li>\n\t\t\t<li>rotate , rotateX , rotateY</li>\n\t\t\t<li>skew , skewX , skewY</li>\n\t\t\t<li>scale , scaleX , scaleY</li>\n\t\t\t<li>matrix</li>\n\t\t</ul>\n\t\t<strong>Supporting special property</strong>\n\t\t<ul>\n\t\t\t<li>delay : {Number} tween 을 시작전 대기 시간을 지정합니다.</li>\n\t\t\t<li>ease : {Function} tween 의 transform-timing-function 방식을 지정합니다. EXTransform.timing.* 을 참고하세요.</li>\n\t\t\t<li>onComplete : {Function} tween 이 완료되는 시점에 호출될 콜백 함수를 지정합니다.</li>\n\t\t\t<li>onCompleteParams : {Array} onComplete 에 지정된 콜백 함수에 전달할 파라미터를 배열 형태로 지정합니다.</li>\n\t\t</ul>\n\t</div>",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTransform"
        },
        {
            "file": "experJS\\transitions\\EXTransform.js",
            "line": 287,
            "description": "EXTransform.transform 에 등록된 모든 tween 을 중지, 제거 합니다.",
            "itemtype": "method",
            "name": "killTransformAll",
            "static": 1,
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTransform"
        },
        {
            "file": "experJS\\transitions\\EXTransform.js",
            "line": 300,
            "description": "EXTransform.transform 에 등록된 모든 tween 을 중지, 제거 합니다.",
            "itemtype": "method",
            "name": "killTransformsOf",
            "static": 1,
            "params": [
                {
                    "name": "tweenObject",
                    "description": "tween 을 중지, 제거할 객체.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTransform"
        },
        {
            "file": "experJS\\transitions\\EXTween.js",
            "line": 56,
            "description": "EXTween 의 일련의 동작을 console.log 를 통해 출력합니다.",
            "itemtype": "method",
            "name": "setDebugMode",
            "static": 1,
            "params": [
                {
                    "name": "bool",
                    "description": "debug mode setting",
                    "type": "Boolean"
                }
            ],
            "default": "false",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<style type=\"text/css\">\n\t\t#testBox1 { width:100px; height:100px; background-color:#ff0000; }\n\t</style>\n\t<script type=\"text/javascript\" src=\"../../vw/transitions/EXTween_1.0.0.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"testBox1\"></div>\n\t</body>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tvar testBox1 = document.getElementById(\"testBox1\");\n\t\tEXTween.setDebugMode(true); // console.log 로 EXTween 동작을 출력합니다.\n\t\tEXTween.to(testBox1 , 1 , { width:400 });\n\t\tEXTween.to(testBox1 , 1 , { delay:1 , height:300 , backgroundColor:0xffff00 });\n\t\tEXTween.to(testBox1 , 1 , { delay:2 , width:100 , height:100 , onUpdate:tweenUpdate1 });\n\t\tEXTween.to(testBox1 , 1 , { delay:2.5 , width:40 , height:20 , backgroundColor:0xcccccc ,  onComplete:tweenComplete1 });\n\n\t\tfunction tweenUpdate1(){\n\t\t\ttestBox1.innerHTML = Math.ceil(testBox1.offsetWidth);\n\t\t}\n\t\tfunction tweenComplete1(){\n\t\t\tconsole.log(\"tweenComplete1\");\n\t\t}\n\t})();\n\t</script>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTween"
        },
        {
            "file": "experJS\\transitions\\EXTween.js",
            "line": 99,
            "description": "EXTween 의 전체 tween rendering speed 를 지정합니다.\n<br/>기본값은 12 이며, 지정되는 값이 커질수록 rendering 속도가 늦어지게 됩니다.",
            "itemtype": "method",
            "name": "setGlobalIntervalRender",
            "static": 1,
            "params": [
                {
                    "name": "val",
                    "description": "set tweening render speed.",
                    "type": "Integer"
                }
            ],
            "default": "12",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<style type=\"text/css\">\n\t\t#testBox1 { width:100px; height:100px; background-color:#ff0000; }\n\t</style>\n\t<script type=\"text/javascript\" src=\"../../vw/transitions/EXTween_1.0.0.js\"></script>\n\t</head>\n\t<body>\n\t\t<div id=\"testBox1\"></div>\n\t</body>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tvar testBox1 = document.getElementById(\"testBox1\");\n\t\tEXTween.setGlobalIntervalRender(36); // default 12 - if you increase value then slowly render tween.\n\t\tEXTween.to(testBox1 , 1 , { width:400 });\n\t})();\n\t</script>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTween"
        },
        {
            "file": "experJS\\transitions\\EXTween.js",
            "line": 133,
            "description": "EXTween 의 전체 tween interval speed 를 지정합니다.\n<br/>기본값은 1이며, 지정되는 값이 커질수록 interval 횟수가 늘어납니다.(계산을 더 상세하게 합니다.)",
            "itemtype": "method",
            "name": "setGlobalInterval",
            "static": 1,
            "params": [
                {
                    "name": "val",
                    "description": "set tweening interval speed.",
                    "type": "Number"
                }
            ],
            "default": "1",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"transitions/EXTween\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tvar testBox1 = document.getElementById(\"testBox1\");\n\t\t\tEXTween.setGlobalInterval(0.1); // default 1 - if you increase value then slowly render tween.\n\t\t\tEXTween.to(testBox1 , 1 , { width:400 });\n\t\t});\n\t})();\n\t</script>\n\t<style type=\"text/css\">\n\t\t#testBox1 { width:100px; height:100px; background-color:#ff0000; }\n\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"testBox1\"></div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTween"
        },
        {
            "file": "experJS\\transitions\\EXTween.js",
            "line": 172,
            "description": "EXTween 의 기본 ease 속성을 지정합니다.\n<br/>기본값은 EXEasing.easeOutQuad 이며, EXEasing 에서 지원하는 함수를 지정 가능합니다.",
            "itemtype": "method",
            "name": "setDefaultEasing",
            "static": 1,
            "params": [
                {
                    "name": "easing",
                    "description": "EXEasing easing function.",
                    "type": "Function"
                }
            ],
            "default": "EXEasing.easeOutQuad",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"transitions/EXTween\");\n\t\tEX.include(\"transitions/EXEasing\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tvar testBox1 = document.getElementById(\"testBox1\");\n\t\t\tEXTween.setDefaultEasing( EXEasing.easeInOutBack ); // default EXTween.easing.easeOutQuad\n\t\t\tEXTween.to(testBox1 , 1 , { width:400 });\n\t\t});\n\t})();\n\t</script>\n\t<style type=\"text/css\">\n\t\t#testBox1 { width:100px; height:100px; background-color:#ff0000; }\n\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"testBox1\"></div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTween"
        },
        {
            "file": "experJS\\transitions\\EXTween.js",
            "line": 211,
            "description": "EXTween 에서 주로 사용하게 되는 method로 Tween 을 사용합니다.\n<br/>지원 속성과 예제를 참고하시기 바랍니다.",
            "itemtype": "method",
            "name": "to",
            "static": 1,
            "params": [
                {
                    "name": "tweenObject",
                    "description": "tween target object.",
                    "type": "HTMLElement | Object"
                },
                {
                    "name": "speed",
                    "description": "tween speed.",
                    "type": "Nubmber"
                },
                {
                    "name": "tweenProperty",
                    "description": "Style property of HTMLElement and number property of Object.\n\t<div>\n\t\t<h6 style=\"color:#66bbcc;\">[[ Support property ]]</h6>\n\t\t<strong>style property of HTMLElement</strong>\n\t\t<ul>\n\t\t\t<li>top , left , right , bottom</li>\n\t\t\t<li>width , height</li>\n\t\t\t<li>marginTop , marginBottom , marginLeft , marginRight</li>\n\t\t\t<li>fontSize , fontWeight , color</li>\n\t\t\t<li>paddingTop , paddingBottom , paddingLeft , paddingRight</li>\n\t\t\t<li>backgroundColor , backgroundPositionX , backgroundPositionY</li>\n\t\t\t<li>borderTopWidth , borderBottomWidth , borderLeftWidth , borderRightWidth</li>\n\t\t\t<li>borderTopColor , borderBottomColor , borderLeftColor , borderRightColor</li>\n\t\t\t<li>opacity</li>\n\t\t</ul>\n\t\t<strong>Javascript property of HTMLElement</strong>\n\t\t<ul>\n\t\t\t<li>scrollTop , scrollLeft</li>\n\t\t</ul>\n\t\t<strong>number type property of Object</strong>\n\t\t<ul>\n\t\t\t<li>Anything property. But only data type to number.</li>\n\t\t</ul>\n\t\t<strong>Supporting special property</strong>\n\t\t<ul>\n\t\t\t<li>delay : {Number} tween 을 시작전 대기 시간을 지정합니다.</li>\n\t\t\t<li>ease : {Function} tween 의 easing 방식을 지정합니다. EXEasing.* 을 참고하세요.</li>\n\t\t\t<li>toInt : {boolean} 소수점 계산을 무시하고 정수 계산합니다.</li>\n\t\t\t<li>autoOpacity : {Number} opacity 가 0 에 도달할 경우 자동으로 visibility,display 속성을 hidden 합니다. 또는 visibility,display 속성이 hidden 상태일 때 opacity 가 0 보다 크게 tween 될 경우 자동으로 visible 처리합니다.</li>\n\t\t\t<li>onInit : {Function} tween 이 초기화 될때 호출 되는 콜백 함수를 지정합니다.(delay 속성에 지정된 대기 시간이 적용 되지 않습니다.)</li>\n\t\t\t<li>onInitParams : {Array} onInit 에 지정된 콜백 함수에 전달할 파라미터를 배열 형태로 지정합니다.</li>\n\t\t\t<li>onStart : {Function} tween 이 시작될때 호출 되는 콜백 함수를 지정합니다.(delay 속성에 지정된 대기 시간이 적용 됩니다.)</li>\n\t\t\t<li>onStartParams : {Array} onStart 에 지정된 콜백 함수에 전달할 파라미터를 배열 형태로 지정합니다.</li>\n\t\t\t<li>onUpdate : {Function} tweening 이 일어나는 동안 계속해서 호출될 콜백 함수를 지정합니다.</li>\n\t\t\t<li>onUpdateParams : {Array} onUpdate 에 지정된 콜백 함수에 전달할 파라미터를 배열 형태로 지정합니다.</li>\n\t\t\t<li>onComplete : {Function} tween 이 완료되는 시점에 호출될 콜백 함수를 지정합니다.</li>\n\t\t\t<li>onCompleteParams : {Array} onComplete 에 지정된 콜백 함수에 전달할 파라미터를 배열 형태로 지정합니다.</li>\n\t\t</ul>\n\t</div>",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"transitions/EXTween\");\n\t\tEX.include(\"transitions/EXEasing\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tvar testBox1 = document.getElementById(\"testBox1\");\n\n\t\t\tEXTween.setDebugMode(true); // debug console.log\n\n\t\t\tEXTween.to( testBox1 , 1 , { opacity:0.3 , width:300 , height:300 , ease:EXEasing.easeOutQuint });\n\t\t\tEXTween.to( testBox1 , 1 , { delay:1 , width:50 , height:50 , ease:EXEasing.easeInOutBack});\n\t\t\tEXTween.to( testBox1 , 1 , { delay:2.5 , top:200 , ease:EXEasing.easeOutBounce });\n\t\t\tEXTween.to( testBox1 , 1 , { delay:4 , left:200 , ease:EXEasing.easeOutBack });\n\t\t\tEXTween.to( testBox1 , 0.8 , { delay:5 , width:100 , height:300 , top:100 , ease:EXEasing.easeOutExpo });\n\t\t\tEXTween.to( testBox1 , 0.5 , { delay:6 , backgroundColor:0xffff00 });\n\t\t\tEXTween.to( testBox1 , 0.5 , { delay:7 , opacity:1 , backgroundColor:0xeeeeee });\n\n\t\t\tEXTween.delayedCall(8 , delayedComplete2);\n\t\t\tEXTween.delayedCall(12 , delayedComplete3);\n\t\t\tEXTween.delayedCall(20 , delayedComplete4);\n\n\t\t\tfunction delayedComplete2(){\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { borderLeftWidth:10 , borderRightWidth:10 });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:1 , borderTopWidth:10 , borderBottomWidth:10 });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:2 , borderLeftColor:0xff0000 , borderRightColor:0x00cc00 });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:3 , borderLeftWidth:0 , borderRightWidth:0 , borderTopWidth:0 , borderBottomWidth:0 });\n\t\t\t}\n\n\t\t\tfunction delayedComplete3(){\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { width:400 , height:80 , left:10 , top:10 });\n\n\t\t\t\tvar numObject = new NumberObject();\n\t\t\t\tEXTween.to( numObject , 1.5 , { delay:1 , x:1000 , onUpdate:function(){\n\t\t\t\t\t\ttestBox1.innerHTML = \"<strong> number </strong>tween X : \" + numObject.x;\n\t\t\t\t\t}, ease:EXEasing.easeOutExpo });\n\t\t\t\t\t\n\t\t\t\tEXTween.to( numObject , 1.5 , { delay:4 , y:-2000 , toInt:true \n\t\t\t\t\t, onUpdate:function(){\n\t\t\t\t\t\ttestBox1.innerHTML = \"<strong> integer </strong>tween Y : \" + numObject.y;\n\t\t\t\t\t}\n\t\t\t\t\t, onComplete:function( param1 , param2 ){\n\t\t\t\t\t\ttestBox1.innerHTML = param1 + \" - \" + param2 + \"!!\";\n\t\t\t\t\t}\n\t\t\t\t\t, onCompleteParams: [\"tween\" , \"complete\"]\n\t\t\t\t\t, ease:EXEasing.easeInOutQuint });\n\n\t\t\t\tfunction NumberObject(){\n\t\t\t\t\tvar numObj = {};\n\t\t\t\t\tnumObj.x = 0;\n\t\t\t\t\tnumObj.y = 2000;\n\t\t\t\t\treturn numObj\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction delayedComplete4(){\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { fontSize:40 , ease:EXEasing.easeOutQuart });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:1 , color:0xff0000 , ease:EXEasing.easeOutQuart });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:2 , fontSize:12 , color:0x000000 , ease:EXEasing.easeOutQuart });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:3 , paddingTop:20 });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:4 , paddingLeft:20 , onComplete:function(){\n\t\t\t\t\ttestBox1.style.background = \"#bbbbbb url(../../data/img/visual_cat.gif) 0 0 no-repeat\";\n\t\t\t\t\talert(\"background-position\");\n\t\t\t\t}});\n\t\t\t\t\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:6 , backgroundPositionX:50 , ease:EXEasing.easeOutQuint });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:7 , backgroundPositionX:-100 , ease:EXEasing.easeOutQuint });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:8 , backgroundPositionY:30 , ease:EXEasing.easeOutQuint });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:9 , backgroundPositionY:-100 , ease:EXEasing.easeOutQuint });\n\t\t\t\tEXTween.to( testBox1 , 0.5 , { delay:10 , autoOpacity:0 , onComplete:function(){\n\t\t\t\t\talert(\"Hello EXTween ~ :)\");\n\t\t\t\t}});\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\t<style type=\"text/css\">\n\t\thtml , body { padding:0; margin:0; }\n\t\t.bgBox { position:absolute; width:300px; height:300px; background-color:#00ff00; }\n\t\t.bgBox.sm1 { top:230px; left:120px; }\n\t\t.bgBox.sm2 { top:110px; left:320px; height:100px; background-color:#0000ff; }\n\t\t#testBox1 { position:absolute; width:100px; height:100px; border:0px solid #000000; background-color:#ff0000; }\n\t</style>\n\t</head>\n\t<body>\n\t\t<div class=\"bgBox sm1\"></div>\n\t\t<div class=\"bgBox sm2\"></div>\n\t\t<div id=\"testBox1\"></div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTween"
        },
        {
            "file": "experJS\\transitions\\EXTween.js",
            "line": 934,
            "description": "setTimeout 을 좀 더 쉽게 사용할 수 있능 기능을 제공합니다.",
            "itemtype": "method",
            "name": "delayedCall",
            "static": 1,
            "params": [
                {
                    "name": "delayNum",
                    "description": "wait in the value to callback.",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "A function that should be called when the the callback has delay completed.",
                    "type": "Function"
                },
                {
                    "name": "params",
                    "description": "pass the callback function.",
                    "type": "Array"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"transitions/EXTween\");\n\t\tEX.include(\"transitions/EXEasing\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tvar testBox1 = document.getElementById(\"testBox1\");\n\t\t\tEXTween.setDebugMode(true); // debug console.log\n\t\t\tEXTween.delayedCall(1 , function(){\n\t\t\t\talert(\"delayedCall 1\");\n\t\t\t});\n\t\t\tEXTween.delayedCall(2 , testFunc1);\n\t\t\tEXTween.delayedCall(3 , testFunc2 , [\"Hello\" , \"EXTween\"]);\n\n\t\t\tfunction testFunc1(){\n\t\t\t\talert(\"delayedCall 2\");\n\t\t\t}\n\t\t\tfunction testFunc2(param1 , param2){\n\t\t\t\talert(param1 + \" \" + param2);\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\t<style type=\"text/css\">\n\t\thtml , body { padding:0; margin:0; }\n\t</style>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTween"
        },
        {
            "file": "experJS\\transitions\\EXTween.js",
            "line": 1002,
            "description": "EXTween.delayedCall 에 등록되고 대기중인 함수를 제거합니다.\n<br/>(등록된 함수와 제거될 함수는 동일해야 합니다.)",
            "itemtype": "method",
            "name": "killDelayedCalls",
            "static": 1,
            "params": [
                {
                    "name": "func",
                    "description": "EXTween.delayedCall 에 등록된 함수.",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"transitions/EXTween\");\n\t\tEX.include(\"transitions/EXEasing\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEXTween.setDebugMode(true); // debug console.log\n\n\t\t\tfunction testFunc1(){\n\t\t\t\talert(\"delayedCall 2\");\n\t\t\t}\n\n\t\t\tfunction testFunc2(param1 , param2){\n\t\t\t\talert(param1 + \" \" + param2);\n\t\t\t}\n\t\t\t\n\t\t\tvar exm = {};\n\t\t\texm.testFunc = function(){\n\t\t\t\talert(\"called??\");\n\t\t\t}\n\n\t\t\t//There is no way to kill the anonymous function.\n\t\t\tEXTween.delayedCall(1 , function(){\n\t\t\t\talert(\"delayedCall 1\");\n\t\t\t});\n\n\t\t\tEXTween.delayedCall(2 , testFunc1);\n\t\t\tEXTween.delayedCall(3 , testFunc2 , [\"Hello\" , \"EXTween\"]);\n\t\t\tEXTween.delayedCall(4 , exm.testFunc);\n\n\t\t\tEXTween.killDelayedCalls(testFunc1); // kill\n\t\t\tEXTween.killDelayedCalls(exm.testFunc); // kill\n\t\t});\n\t})();\n\t</script>\n\t<style type=\"text/css\">\n\t\thtml , body { padding:0; margin:0; }\n\t</style>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTween"
        },
        {
            "file": "experJS\\transitions\\EXTween.js",
            "line": 1071,
            "description": "지정된 Object 의 EXTween.to 에 등록되고 대기중인 객체의 EXTween 동작을 모두 제거합니다.",
            "itemtype": "method",
            "name": "killTweensOf",
            "static": 1,
            "params": [
                {
                    "name": "tweenObject",
                    "description": "EXTween.to 에 지정된 Object.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"transitions/EXTween\");\n\t\tEX.include(\"transitions/EXEasing\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tvar testBox1 = document.getElementById(\"testBox1\");\n\n\t\t\tEXTween.setDebugMode(true); // debug console.log\n\n\t\t\tEXTween.to( testBox1 , 10 , { width:500 });\n\t\t\tEXTween.to( testBox1 , 6 , { height:400 });\n\t\t\tEXTween.to( testBox1 , 4 , { backgroundColor:0xffff00 });\n\t\t\tEXTween.delayedCall(2 , tweenKill );\n\t\t\tfunction tweenKill(){\n\t\t\t\tEXTween.killTweensOf(testBox1);\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\t<style type=\"text/css\">\n\t\thtml , body { padding:0; margin:0; }\n\t\t#testBox1 { position:absolute; width:100px; height:100px; border:0px solid #000000; background-color:#ff0000; }\n\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"testBox1\"></div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTween"
        },
        {
            "file": "experJS\\transitions\\EXTween.js",
            "line": 1126,
            "description": "EXTween 의 등록된(to, deleayedCall) 모든 tweening 동작을 제거합니다.",
            "itemtype": "method",
            "name": "killAll",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"transitions/EXTween\");\n\t\tEX.include(\"transitions/EXEasing\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tvar testBox1 = document.getElementById(\"testBox1\");\n\t\t\tvar testBox2 = document.getElementById(\"testBox2\");\n\t\t\tvar testBox3 = document.getElementById(\"testBox3\");\n\n\t\t\tEXTween.setDebugMode(true); // debug console.log\n\n\t\t\tEXTween.to( testBox1 , 10 , { width:500 });\n\t\t\tEXTween.to( testBox1 , 6 , { height:400 });\n\t\t\tEXTween.to( testBox1 , 4 , { backgroundColor:0xffff00 });\n\t\t\t\n\t\t\tEXTween.to( testBox2 , 2.5 , { width:200 , onUpdate:function(){\n\t\t\t\ttestBox2.innerHTML = \"width : \" + Math.ceil(testBox2.offsetWidth);\n\t\t\t}});\n\t\t\tEXTween.to( testBox2 , 2.5 , { height:10 });\n\t\t\tEXTween.to( testBox2 , 1.5 , { backgroundColor:0x000000 });\n\t\t\t\n\t\t\tEXTween.to( testBox3 , 1 , { delay:1 , width:10 });\n\t\t\tEXTween.to( testBox3 , 1 , { delay:2 , height:10 });\n\t\t\tEXTween.to( testBox3 , 1 , { delay:3 , backgroundColor:0x000000 });\n\n\t\t\tEXTween.delayedCall(3 , function(){\n\t\t\t\talert(\"delayedCall\");\n\t\t\t});\n\n\t\t\tEXTween.delayedCall(1 , function(){\n\t\t\t\tEXTween.killAll(); // all kill!!!\n\t\t\t});\n\t\t});\n\t})();\n\t</script>\n\t<style type=\"text/css\">\n\t\thtml , body { padding:0; margin:0; }\n\t\t.box { position:absolute; width:100px; height:100px; color:#ffffff; }\n\t\t#testBox1 { background-color:#ff0000; }\n\t\t#testBox2 { top:100px; left:400px; background-color:#00ff00; }\n\t\t#testBox3 { top:300px; left:200px; background-color:#0000ff; }\n\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"testBox1\" class=\"box\"></div>\n\t\t<div id=\"testBox2\" class=\"box\"></div>\n\t\t<div id=\"testBox3\" class=\"box\"></div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTween"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 22,
            "description": "EXCheckBox 를 초기화 합니다.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "originalCheckBoxClassName",
                    "description": "exper 에서 제공하고 파싱하는 클래스가 아닌 직접 지정 가능한 className",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title></title>\n\t<link type=\"text/css\" rel=\"stylesheet\" href=\"../../experCSS/exper.css\" />\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.include(\"ui/EXCheckBox\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\t\n\t\t\tEXCheckBox.init();\n\t\t\t\n\t\t});\n\t})();\n\t</script>\n\n\t<!--Test - original visible //-->\n\t<style type=\"text/css\">\n\t.exUIKit_checkBox.original { position:static; left:auto; visibility:visible; }\n\t</style>\n\n\t</head>\n\t<body>\n\t\t<div>\n\t\t\t<input id=\"check1\" class=\"exUIKit_checkBox\" disabled=\"disabled\" type=\"checkbox\" />\n\t\t\t<label for=\"check1\">checkBox1</label>\n\t\t</div>\n\t\t<div>\n\t\t\t<input id=\"check2\" class=\"exUIKit_checkBox\" type=\"checkbox\" />\n\t\t\t<label for=\"check2\">checkBox2</label>\n\t\t</div>\n\t\t<div>\n\t\t\t<input id=\"check3\" class=\"exUIKit_checkBox\" type=\"checkbox\" />\n\t\t\t<label for=\"check3\">checkBox3</label>\n\t\t</div>\n\t</body>\n\t</html>"
            ],
            "class": "EXCheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 93,
            "description": "지정된 checkbox 객체를 다시 생성합니다.",
            "itemtype": "method",
            "name": "remake",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "originalCheckBox",
                    "description": "다시 생성할 checkbox 객체",
                    "type": "HTMLInputElement"
                }
            ],
            "class": "EXCheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 117,
            "description": "Design Component 로 생성된 객체(들)를 배열 형태로 반환합니다.",
            "itemtype": "method",
            "name": "getList",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "EXCheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 126,
            "description": "Design Component 로 생성된 객체(들)의 총 갯수를 반환합니다.",
            "itemtype": "method",
            "name": "getLength",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "EXCheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 136,
            "description": "EXCheckBox 객체를 파기합니다.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "EXCheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 174,
            "description": "EXCheckBox 에 의해 생성된(참조한) checkbox의 originalCheckBox 를 반환합니다.",
            "itemtype": "method",
            "name": "getOriginalCheckBox",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "originalCheckBox 를 반환합니다.",
                "type": "HTMLInputElement"
            },
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 184,
            "description": "해당 객체를 초기화 합니다.",
            "itemtype": "method",
            "name": "init",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "originalCheckBox",
                    "description": "참조할 originalCheckBox.",
                    "type": "HTMLElement"
                }
            ],
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 219,
            "description": "designCheckBox 의 checked 기능.",
            "itemtype": "method",
            "name": "setDesignChecked",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "check",
                    "description": "check , uncheck 에 따라 css 클래스를 부여하여 view 처리를 합니다.",
                    "type": "Boolean"
                }
            ],
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 233,
            "description": "designCheckBox 의 interaction 을 핸들링 합니다.\nclick 시 실제 동작은 originalCheckBox 를 click 시킴으로써\ndesignCheckBox 와 originalCheckBox 의 click 시 일어나는 동작을 같은 동일하게 할 수 있도록 합니다.\ndesignCheckBox 의 click 이벤트는 실제로는 interactionOriginalCheckBoxEventHandler 메소드로 전이 되는것과 같습니다.",
            "itemtype": "method",
            "name": "interactionEXCheckBoxEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "이벤트 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 250,
            "description": "originalCheckBox 의 interaction 을 핸들링 합니다.",
            "itemtype": "method",
            "name": "interactionOriginalCheckBoxEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "이벤트 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 263,
            "description": "case \"DOMSubtreeModified\" :\n\t//_originalCheckBox 의 disabled 와 같은 속성이 변경되거나 부여될 때 이벤트\n\tbreak;",
            "itemtype": "method",
            "name": "",
            "access": "private",
            "tagname": "",
            "params": [],
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 275,
            "description": "_originalCheckBox 를 disabled , enabled 처리를 합니다.",
            "itemtype": "method",
            "name": "setDisabled",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 289,
            "description": "_originalCheckBox 를 checked 처리를 합니다.",
            "itemtype": "method",
            "name": "setChecked",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 304,
            "description": "designCheckBox 와 originalCheckBox 의 checked 상태를 변경합니다.",
            "itemtype": "method",
            "name": "setToggleChecked",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXCheckBox.js",
            "line": 321,
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "EXCheckBox.CheckBox"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 28,
            "description": "EXRadioButton 를 초기화 합니다.",
            "itemtype": "method",
            "name": "init",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "originalRadioGroupClassName",
                    "description": "exper 에서 제공하고 파싱하는 클래스가 아닌 직접 지정 가능한 className",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title></title>\n\t<link type=\"text/css\" rel=\"stylesheet\" href=\"../../experCSS/exper.css\" />\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\");\n\t\tEX.include(\"ui/EXRadioButton\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEXRadioButton.init();\n\n\t\t});\n\t})();\n\t</script>\n\n\t<!--Test - original visible //-->\n\t<style type=\"text/css\">\n\t.exUIKit_radioGroup.original { position:static; left:auto; visibility:visible; }\n\t</style>\n\n\t</head>\n\t<body>\n\t\t<div>\n\t\t\t<input id=\"radio11\" class=\"exUIKit_radioGroup\" type=\"radio\" name=\"radio111\" />\n\t\t\t<label for=\"radio11\">radio1</label>\n\n\t\t\t<input id=\"radio12\" class=\"exUIKit_radioGroup\" type=\"radio\" name=\"radio111\" />\n\t\t\t<label for=\"radio12\">radio1</label>\n\n\t\t\t<input id=\"radio13\" class=\"exUIKit_radioGroup\" type=\"radio\" name=\"radio111\" disabled=\"disabled\" />\n\t\t\t<label for=\"radio13\">radio1</label>\n\t\t</div>\n\n\t\t<br/><br/><br/>\n\n\t\t<div>\n\t\t\t<input id=\"radio21\" class=\"exUIKit_radioGroup\" type=\"radio\" name=\"radio222\" />\n\t\t\t<label for=\"radio21\">radio2</label>\n\t\t</div>\n\t\t<div>\n\t\t\t<input id=\"radio22\" class=\"exUIKit_radioGroup\" type=\"radio\" name=\"radio222\" />\n\t\t\t<label for=\"radio22\">radio2</label>\n\t\t</div>\n\t</body>\n\t</html>"
            ],
            "class": "EXRadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 109,
            "description": "지정된 radioButton 객체를 다시 생성합니다.",
            "itemtype": "method",
            "name": "remake",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "originalRadioButton",
                    "description": "다시 생성할 radioButton 객체",
                    "type": "HTMLInputElement"
                }
            ],
            "class": "EXRadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 133,
            "description": "Design Component 로 생성된 객체(들)를 배열 형태로 반환합니다.",
            "itemtype": "method",
            "name": "getList",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "EXRadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 142,
            "description": "Design Component 로 생성된 객체(들)의 총 갯수를 반환합니다.",
            "itemtype": "method",
            "name": "getLength",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "EXRadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 152,
            "description": "EXRadioButton 객체를 파기합니다.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "EXRadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 175,
            "description": "EXRadioButton 의 전역 이벤트를 핸들링 합니다.",
            "itemtype": "method",
            "name": "publicEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "이벤트 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXRadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 191,
            "description": "EXRadioButton group checked, unchecked 를 합니다.",
            "itemtype": "method",
            "name": "radioGroupChecked",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "designRadio",
                    "description": "designRadio 객체.",
                    "type": "EXRadioButton"
                },
                {
                    "name": "radioName",
                    "description": "designRadio 의 group name.",
                    "type": "String"
                }
            ],
            "class": "EXRadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 236,
            "description": "해당 객체가 생성될때 참조한 originalRadio 의 group(name) 을 반환합니다.",
            "itemtype": "method",
            "name": "getRadioName",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "radio group name.",
                "type": "String"
            },
            "class": "EXRadioButton.RadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 246,
            "description": "EXRadioButton 에 의해 생성된(참조한) radioButton의 originalRadioButton 를 반환합니다.",
            "itemtype": "method",
            "name": "getOriginalRadioButton",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "originalRadioButton 를 반환합니다.",
                "type": "HTMLInputElement"
            },
            "class": "EXRadioButton.RadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 256,
            "description": "해당 객체를 초기화 합니다.\noriginalRadio 한 개에 대응하는 designRadio 를 만들어 냅니다.",
            "itemtype": "method",
            "name": "init",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "originalRadioButton",
                    "description": "참조될 originalRadio.",
                    "type": "HTMLElement"
                }
            ],
            "class": "EXRadioButton.RadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 295,
            "description": "designRadio 의 interaction 을 핸들링 합니다.\nclick 시 실제 동작은 originalRadio 를 click 시킴으로써\ndesignRadio 와 originalRadio 의 click 시 일어나는 동작을 같은 동일하게 할 수 있도록 합니다.\ndesignRadio 의 click 이벤트는 실제로는 interactionOriginalRadioBtnEventHandler 메소드로 전이 되는것과 같습니다.",
            "itemtype": "method",
            "name": "interactionDesignRadioBtnEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "이벤트 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXRadioButton.RadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 314,
            "description": "originalRadio 의 interaction 을 핸들링 합니다.",
            "itemtype": "method",
            "name": "interactionOriginalRadioBtnEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "이벤트 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXRadioButton.RadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 333,
            "description": "case \"DOMSubtreeModified\" :\n\t//_originalRadioButton 의 disabled 와 같은 속성이 변경되거나 부여될 때 이벤트\n\t_this.setDisabled(_originalRadioButton.disabled);\n\tbreak;",
            "itemtype": "method",
            "name": "",
            "access": "private",
            "tagname": "",
            "params": [],
            "class": "EXRadioButton.RadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 346,
            "description": "designRadio 의 checked 기능.",
            "itemtype": "method",
            "name": "setDesignChecked",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "check",
                    "description": "checked 여부.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXRadioButton.RadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 363,
            "description": "_originalRadioButton 를 disabled , enabled 처리를 합니다.",
            "itemtype": "method",
            "name": "setDisabled",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "disable",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "EXRadioButton.RadioButton"
        },
        {
            "file": "experJS\\ui\\EXRadioButton.js",
            "line": 378,
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "EXRadioButton.RadioButton"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 49,
            "itemtype": "property",
            "name": "uiScrollBar",
            "type": "{EXScrollViewY.UI_Bar}",
            "class": "EXScrollViewY"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 55,
            "description": "EXScrollViewY 인스턴스를 초기화 합니다.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "scrollContainer",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "scrollContent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 154,
            "description": "iframe 과 같이 한 화면에 다른 문서의 scroll 을 제어해야 할 경우 wheel 이벤트의 delegate 를 지정하여 이벤트를 ScrollViewY 와 연결합니다.",
            "itemtype": "method",
            "name": "delegateWheelEvent",
            "params": [
                {
                    "name": "delegateWheelObject",
                    "description": "",
                    "type": "DOM"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 178,
            "description": "delegate 가 iframe 일 경우 크로스 브라우징 처리를 EXScrollViewY 클래스 내부에서 해줍니다.",
            "itemtype": "method",
            "name": "delegateWheelEventForIframe",
            "params": [
                {
                    "name": "iframe",
                    "description": "",
                    "type": "DOM"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 203,
            "description": "mouse wheel 이벤트의 delta 값을 이용해 스크롤 합니다.",
            "itemtype": "method",
            "name": "calculateWheelScrolling",
            "params": [
                {
                    "name": "delta",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 228,
            "description": "지정된 값 만큼 스크롤 합니다.",
            "itemtype": "method",
            "name": "calculateScrollingY",
            "params": [
                {
                    "name": "calculate",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 257,
            "description": "스크롤을 부드럽고 자연스럽게 연출하기 위한 메소드 입니다.",
            "itemtype": "method",
            "name": "smoothScrollIntervaling",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 280,
            "description": "스크롤을 부드럽고 자연스럽게 연출하기 위해 사용되는 interval 을 중지, 시작 제어를 합니다.",
            "itemtype": "method",
            "name": "setScrollInterval",
            "params": [
                {
                    "name": "bool",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 302,
            "description": "EXScrollViewY 인스턴스를 파기 합니다.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 376,
            "itemtype": "property",
            "name": "isMouseDown",
            "type": "{boolean}",
            "default": "false",
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 383,
            "itemtype": "property",
            "name": "isMouseOver",
            "type": "{boolean}",
            "default": "false",
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 390,
            "description": "EXScrollViewY.UI_Bar 인스턴스를 초기화 합니다.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "scrollContainer",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "maxY",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 511,
            "itemtype": "method",
            "name": "setDelegateDocument",
            "params": [
                {
                    "name": "delegate",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 520,
            "description": "EXScrollViewY 에 움직여야 할 scroll 값을 요청합니다.",
            "itemtype": "method",
            "name": "requestScrollPercent",
            "params": [
                {
                    "name": "movePercent",
                    "description": "",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 534,
            "description": "EXScrollViewY 에 의해 움직여야할 percent 값을 지정 받습니다.",
            "itemtype": "method",
            "name": "setScrollPercent",
            "params": [
                {
                    "name": "percent",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 549,
            "description": "UI Bar 를 visible , hidden 합니다.",
            "itemtype": "method",
            "name": "show",
            "params": [
                {
                    "name": "bool",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 566,
            "itemtype": "method",
            "name": "getBarContainer",
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 574,
            "itemtype": "method",
            "name": "getBar",
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXScrollView.js",
            "line": 582,
            "description": "UI Bar 를 파기 합니다.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXScrollViewY.UI_Bar"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 40,
            "description": "EXSelectBox 객체를 초기화 합니다.",
            "itemtype": "method",
            "name": "init",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "originalSelectClassName",
                    "description": "exper 에서 제공하고 파싱하는 클래스가 아닌 직접 지정 가능한 className",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title></title>\n\t<link type=\"text/css\" rel=\"stylesheet\" href=\"../../experCSS/exper.css\" />\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"ui/EXSelectBox\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\n\t\t\tEXSelectBox.init(); // EXSelectBox initialize\n\n\t\t});\n\t})();\n\t</script>\n\n\t<!--Test - original visible //-->\n\t<style>\n\tselect.exUIKit_selectBox { visibility:visible; position:static; left:0; }\n\t</style>\n\n\t</head>\n\t<body>\n\t\t<select id=\"testSelectBox1\" name=\"selectBox1\" class=\"exUIKit_selectBox\">\n\t\t\t<option>가</option>\n\t\t\t<option>나나</option>\n\t\t\t<option>다다다</option>\n\t\t\t<option>안녕하세요</option>\n\t\t\t<option>이윤석 입니다.</option>\n\t\t</select>\n\t\t<select id=\"testSelectBox2\" name=\"selectBox2\" class=\"exUIKit_selectBox\">\n\t\t\t<option>AA</option>\n\t\t\t<option>BBBB</option>\n\t\t\t<option>CCCCCC</option>\n\t\t\t<option>Hello javascript</option>\n\t\t\t<option>molgga</option>\n\t\t</select>\n\t\t<select id=\"testSelectBox3\" name=\"selectBox3\" class=\"exUIKit_selectBox\">\n\t\t\t<option>123</option>\n\t\t\t<option>456</option>\n\t\t\t<option selected=\"selected\">7890</option>\n\t\t</select>\n\t\t<select id=\"testSelectBox4\" name=\"selectBox4\" class=\"exUIKit_selectBox\" disabled=\"disabled\">\n\t\t\t<option>11111111</option>\n\t\t\t<option>22222222</option>\n\t\t\t<option>3</option>\n\t\t\t<option>4</option>\n\t\t\t<option>5</option>\n\t\t\t<option>6</option>\n\t\t\t<option>7</option>\n\t\t</select>\n\t</body>\n\t</html>"
            ],
            "class": "EXSelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 129,
            "description": "지정된 select 객체를 다시 생성합니다.",
            "itemtype": "method",
            "name": "remake",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "originalSelectBox",
                    "description": "다시 생성할 select 객체",
                    "type": "HTMLSelectElement"
                }
            ],
            "class": "EXSelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 156,
            "description": "Design Component 로 생성된 객체(들)를 배열 형태로 반환합니다.",
            "itemtype": "method",
            "name": "getList",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "EXSelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 165,
            "description": "Design Component 로 생성된 객체(들)의 총 갯수를 반환합니다.",
            "itemtype": "method",
            "name": "getLength",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "EXSelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 175,
            "description": "EXSelectBox 객체의 자원을 모두 해제하고 파기 합니다.",
            "itemtype": "method",
            "name": "destroy",
            "access": "public",
            "tagname": "",
            "class": "EXSelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 202,
            "description": "designSelectBox 에서 일어나는 전역 이벤틀 핸들링 합니다.",
            "itemtype": "method",
            "name": "publicEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "Event 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXSelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 236,
            "itemtype": "method",
            "name": "documentEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "Event 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXSelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 270,
            "description": "해당 객체를 초기화 합니다.",
            "itemtype": "method",
            "name": "init",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "originalSelectBox",
                    "description": "해당 객체에서 참조(1:1 대응)할 originalSelectBox 객체.",
                    "type": "HTMLElement"
                }
            ],
            "class": "EXSelectBox.SelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 353,
            "description": "designSelectBox 의 optionGroup 을 열거나 닫습니다.",
            "itemtype": "method",
            "name": "setOpen",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "open",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "EXSelectBox.SelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 372,
            "description": "designSelectBox 를 disabled , enabled 처리를 합니다.",
            "itemtype": "method",
            "name": "setDisabled",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "disable",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "EXSelectBox.SelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 388,
            "description": "designSelectBox 의 interaction 을 핸들링 합니다.",
            "itemtype": "method",
            "name": "interactionSelectOptionGroupEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "Event 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXSelectBox.SelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 403,
            "description": "designSelectBox 의 interaction 을 핸들링 합니다.",
            "itemtype": "method",
            "name": "interactionEXSelectBoxEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "Event 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXSelectBox.SelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 431,
            "description": "originalSelectBox 의 interaction 을 핸들링 합니다.",
            "itemtype": "method",
            "name": "interactionOriginalEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "Event 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXSelectBox.SelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 451,
            "description": "originalSelectBox 와 designSelectBox 의 selected 처리를 합니다.",
            "itemtype": "method",
            "name": "optionSelectByIndex",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "index",
                    "description": "selected 처리할 option 의 index.",
                    "type": "Integer"
                },
                {
                    "name": "initial",
                    "description": "최초 실행인지를 판단.",
                    "type": "Boolean"
                }
            ],
            "class": "EXSelectBox.SelectBox"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 534,
            "description": "해당 객체를 초기화 합니다.",
            "itemtype": "method",
            "name": "init",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "originalSelectBox",
                    "description": "해당 객체에서 참조할 originalSelectBox.",
                    "type": "HTMLElement"
                }
            ],
            "class": "EXSelectBox.SelectBoxOptionGroup"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 560,
            "description": "optionGroup 에 속한 options 을 배열 형태로 반환합니다.",
            "itemtype": "method",
            "name": "getOptionByIndex",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "EXSelectBox.SelectBoxOptionGroup"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 568,
            "description": "optionGroup 에 속한 options 중 지정된 index 에 해당하는 option 객체를 반환합니다.",
            "itemtype": "method",
            "name": "getOptionByIndex",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "index",
                    "description": "반환 받을 option 객체의 index.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "SelectBoxOption"
            },
            "class": "EXSelectBox.SelectBoxOptionGroup"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 577,
            "description": "optionGroup 에 속한 options 중 지정된 selectIndex 를 selected 처리하고,\n이전 selected 상태였던 option 객체를 unselected 처리 합니다.",
            "itemtype": "method",
            "name": "optionSelectByIndex",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "selected 된 SelectBoxOption 객체의 value 속성값을 반환합니다.",
                "type": "String"
            },
            "class": "EXSelectBox.SelectBoxOptionGroup"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 597,
            "description": "optionGroup 의 열림 상태를 반환합니다.",
            "itemtype": "method",
            "name": "isOpen",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXSelectBox.SelectBoxOptionGroup"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 605,
            "description": "optionGroup 을 열거나 닫습니다. css class 를 부여하거나 제거하여 view 처리를 변경합니다.",
            "itemtype": "method",
            "name": "setOpen",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "open",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXSelectBox.SelectBoxOptionGroup"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 623,
            "description": "해당 객체의 interaction 이벤트를 핸들링 합니다.",
            "itemtype": "method",
            "name": "interactionOptionGroupEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "Event 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXSelectBox.SelectBoxOptionGroup"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 640,
            "description": "optionGroup 에 속한 option 객체의 interaction 이벤트를 핸들링 합니다.",
            "itemtype": "method",
            "name": "interactionOptionEventHandler",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "evt",
                    "description": "Event 객체.",
                    "type": "EXEvent"
                }
            ],
            "class": "EXSelectBox.SelectBoxOptionGroup"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 693,
            "description": "해당 객체를 초기화 합니다.\noptionObj 객체를 부여 받아 필요한 속성을 담습니다.",
            "itemtype": "method",
            "name": "init",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "optionObj",
                    "description": "originalSelectBox 에서 해당 객체가 생성될때 참조(1:1로 대응)할 option 객체.",
                    "type": "HTMLElement"
                }
            ],
            "class": "EXSelectBox.SelectBoxOption"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 710,
            "description": "option 생성시 originalSelectBox 의 option 중 해당 객체가 대응하는 option 의 value 를 반환합니다.",
            "itemtype": "method",
            "name": "getValue",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "option 의 value 값을 반환.",
                "type": "String"
            },
            "class": "EXSelectBox.SelectBoxOption"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 720,
            "description": "option 생성시 originalSelectBox 의 option 중 해당 객체가 대응하는 option 의 index 를 반환합니다.",
            "itemtype": "method",
            "name": "getIndex",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "option 의 selectIndex 값을 반환.",
                "type": "Integer"
            },
            "class": "EXSelectBox.SelectBoxOption"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 730,
            "description": "option 생성시 originalSelectBox 의 option 중 해당 객체가 대응하는 option 의 text 를 반환합니다.",
            "itemtype": "method",
            "name": "getText",
            "access": "public",
            "tagname": "",
            "return": {
                "description": "option 의 text 값을 반환.",
                "type": "String"
            },
            "class": "EXSelectBox.SelectBoxOption"
        },
        {
            "file": "experJS\\ui\\EXSelectBox.js",
            "line": 740,
            "description": "option 의 selected 기능.",
            "itemtype": "method",
            "name": "setSelected",
            "access": "public",
            "tagname": "",
            "params": [
                {
                    "name": "select",
                    "description": "checked , unchecked",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "checked 여부를 반환.",
                "type": "Boolean"
            },
            "class": "EXSelectBox.SelectBoxOption"
        },
        {
            "file": "experJS\\ui\\EXToast.js",
            "line": 51,
            "description": "EXToast 의 싱글톤 말풍선(view) 객체 입니다.",
            "itemtype": "property",
            "name": "singletonAlternate",
            "type": "{HTMLElement}",
            "class": "EXToast"
        },
        {
            "file": "experJS\\ui\\EXToast.js",
            "line": 58,
            "description": "EXToast 를 초기화 합니다.\n<br/>EXToast 는 문서 로드시 자체 init 합니다.",
            "itemtype": "method",
            "name": "init",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXToast"
        },
        {
            "file": "experJS\\ui\\EXToast.js",
            "line": 68,
            "description": "singletonAlternate 객체를 생성합니다.",
            "itemtype": "method",
            "name": "makeToolTip",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXToast"
        },
        {
            "file": "experJS\\ui\\EXToast.js",
            "line": 84,
            "description": "EXToast 를 지정된 시간동안 노출합니다.",
            "itemtype": "method",
            "name": "message",
            "params": [
                {
                    "name": "msg",
                    "description": "노출될 문자(열)",
                    "type": "String"
                },
                {
                    "name": "showSecond",
                    "description": "노출될 지속 시간",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXToast"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 66,
            "description": "EXValidator 의 inputType 별 분류명.",
            "itemtype": "property",
            "name": "inputTypeOf",
            "type": "{Object}",
            "class": "EXValidator"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 81,
            "description": "EXValidator 의 inputType 별 정규식 패턴.",
            "itemtype": "property",
            "name": "inputPattern",
            "type": "{Object}",
            "class": "EXValidator"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 96,
            "description": "EXValidator 를 통과하지 못했을때 inputType 별 노출 메시지.",
            "itemtype": "property",
            "name": "message",
            "type": "{Object}",
            "class": "EXValidator"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 111,
            "description": "EXValidator 의 inputType 체크를 시작합니다.",
            "itemtype": "method",
            "name": "initInputType",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXValidator"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 131,
            "description": "inputType 의 이벤트 체크 핸들러.",
            "itemtype": "method",
            "name": "inputTypeCheckHandler",
            "params": [
                {
                    "name": "evt",
                    "description": "",
                    "type": "EXEvent"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXValidator"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 170,
            "description": "검수시 무시 되어야할 code 와 keyCode 를 비교하여 boolean 값을 반환합니다.",
            "itemtype": "method",
            "name": "isPreventCode",
            "params": [
                {
                    "name": "code",
                    "description": "검수시 무시되어야 할 keyCode 배열",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXValidator"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 188,
            "description": "지정된 typeOf 값의 message 를 EXToast 를 통해 노출합니다.",
            "itemtype": "method",
            "name": "alternative",
            "params": [
                {
                    "name": "typeOf",
                    "description": "EXToast 로 노출될 메세지 type",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXValidator"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 198,
            "description": "지정된 target 객체의 속성을 분석하여 pattern, typeOf 프로퍼티를 할당합니다.",
            "itemtype": "method",
            "name": "getInputTypeParse",
            "params": [
                {
                    "name": "target",
                    "description": "속성을 분석할 객체.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXValidator"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 243,
            "description": "지정된 target 객체에 types 속성이 할당되어 있는지 확인하여 boolean 값으로 반환합니다.",
            "itemtype": "method",
            "name": "hasType",
            "params": [
                {
                    "name": "target",
                    "description": "분석 대상이 될 객체",
                    "type": "HTMLElement"
                },
                {
                    "name": "types",
                    "description": "분석될 속성 값 배열",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXValidator"
        },
        {
            "file": "experJS\\ui\\EXValidator.js",
            "line": 268,
            "description": "지정된 target 객체에 types 속성이 할당되어있지 않은지 확인하여 boolean 값으로 반환합니다.",
            "itemtype": "method",
            "name": "notHasType",
            "params": [
                {
                    "name": "target",
                    "description": "분석 대상이 될 객체",
                    "type": "HTMLElement"
                },
                {
                    "name": "types",
                    "description": "분석될 속성 값 배열",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXValidator"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 14,
            "description": "해당 Browser 가 microsoft 의 Internet Explorer 계열인지 확인합니다.",
            "itemtype": "property",
            "name": "isIE",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 21,
            "description": "해당 Browser 가 microsoft 의 Internet Explorer(이하 IE) 계열일 경우 version 의 숫자를 반환합니다.\n<br/>(IE 계열이 아닐 경우 -1 을 반환합니다.)",
            "itemtype": "property",
            "name": "ieVersion",
            "type": "integer",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 35,
            "description": "해당 Browser 가 microsoft 의 Internet Explorer 6 인지 확인합니다.",
            "itemtype": "property",
            "name": "isIE6",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 46,
            "description": "해당 Browser 가 microsoft 의 Internet Explorer 7 인지 확인합니다.",
            "itemtype": "property",
            "name": "isIE7",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 53,
            "description": "해당 Browser 가 microsoft 의 Internet Explorer 8 인지 확인합니다.",
            "itemtype": "property",
            "name": "isIE8",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 60,
            "description": "해당 Browser 가 microsoft 의 Internet Explorer 9 인지 확인합니다.",
            "itemtype": "property",
            "name": "isIE9",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 67,
            "description": "해당 Browser 가 FireFox 인지 확인합니다.",
            "itemtype": "property",
            "name": "isFireFox",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 74,
            "description": "해당 Browser 가 Safari 인지 확인합니다.",
            "itemtype": "property",
            "name": "isSafari",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 81,
            "description": "해당 Browser 가 Opera 인지 확인합니다.",
            "itemtype": "property",
            "name": "isOpera",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 88,
            "description": "해당 Browser 가 Chrome 인지 확인합니다.",
            "itemtype": "property",
            "name": "isChrome",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 95,
            "description": "해당 Browser 가 Mobile Safari 인지 확인합니다.",
            "itemtype": "property",
            "name": "isMobileSafari",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 102,
            "description": "해당 Browser 가 Android 인지 확인합니다.",
            "itemtype": "property",
            "name": "isAndroid",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 109,
            "description": "해당 Browser 가 Mobile 인지 확인합니다.",
            "itemtype": "property",
            "name": "isMobile",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 116,
            "description": "해당 Browser 가 Apple 사의 iPad 인지 확인합니다.",
            "itemtype": "property",
            "name": "isIPad",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 123,
            "description": "해당 Browser 가 Apple 사의 iPhone 인지 확인합니다.",
            "itemtype": "property",
            "name": "isIPhone",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 130,
            "description": "해당 Browser 가 Apple 사의 iPod 인지 확인합니다.",
            "itemtype": "property",
            "name": "isIPod",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 137,
            "description": "해당 통신 프로토콜이 secure socket 인지 확인합니다.",
            "itemtype": "property",
            "name": "isHTTPS",
            "type": "boolean",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 144,
            "description": "window screenTop 의 값을 반환합니다.(브라우져의 y 좌표)",
            "itemtype": "method",
            "name": "screenTop",
            "static": 1,
            "params": [
                {
                    "name": "ext",
                    "description": "반환될 값에 지정된 타입을 붙여 반환합니다. 예를 들어 반환값이 1024 일 때 \"px\" 이라는 문자열을 보낼경우 반환값은 1024 가 아닌 \"1024px\" 로 반환합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debug(\"screenTop : \", EXBrowser.screenTop());\n\t\t\tEX.debug(\"screenTop : \", EXBrowser.screenTop(\"px\"));\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Number || String"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 186,
            "description": "window screenLeft 의 값을 반환합니다.(브라우져의 x 좌표)",
            "itemtype": "method",
            "name": "screenLeft",
            "static": 1,
            "params": [
                {
                    "name": "ext",
                    "description": "반환될 값에 지정된 타입을 붙여 반환합니다. 예를 들어 반환값이 1024 일 때 \"px\" 이라는 문자열을 보낼경우 반환값은 1024 가 아닌 \"1024px\" 로 반환합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debug(\"screenLeft : \", EXBrowser.screenLeft());\n\t\t\tEX.debug(\"screenLeft : \", EXBrowser.screenLeft(\"px\"));\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Number || String"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 229,
            "description": "문서의 scroll 된 top 위치값을 반환합니다.",
            "itemtype": "method",
            "name": "scrollTop",
            "static": 1,
            "params": [
                {
                    "name": "ext",
                    "description": "반환될 값에 지정된 타입을 붙여 반환합니다. 예를 들어 반환값이 1024 일 때 \"px\" 이라는 문자열을 보낼경우 반환값은 1024 가 아닌 \"1024px\" 로 반환합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debug(\"scrollTop : \", EXBrowser.scrollTop());\n\t\t\tEX.debug(\"scrollTop : \", EXBrowser.scrollTop(\"px\"));\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "retrun": "{Number || String}",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 265,
            "description": "문서의 scroll 된 left 위치값을 반환합니다.",
            "itemtype": "method",
            "name": "scrollLeft",
            "static": 1,
            "params": [
                {
                    "name": "ext",
                    "description": "반환될 값에 지정된 타입을 붙여 반환합니다. 예를 들어 반환값이 1024 일 때 \"px\" 이라는 문자열을 보낼경우 반환값은 1024 가 아닌 \"1024px\" 로 반환합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debug(\"scrollLeft : \", EXBrowser.scrollLeft());\n\t\t\tEX.debug(\"scrollLeft : \", EXBrowser.scrollLeft(\"px\"));\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "retrun": "{Number || String}",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 302,
            "description": "문서의 width size를 반환합니다.",
            "itemtype": "method",
            "name": "scrollWidth",
            "static": 1,
            "params": [
                {
                    "name": "ext",
                    "description": "반환될 값에 지정된 타입을 붙여 반환합니다. 예를 들어 반환값이 1024 일 때 \"px\" 이라는 문자열을 보낼경우 반환값은 1024 가 아닌 \"1024px\" 로 반환합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"utils/exports\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"scrollWidth :\" , exports.scrollWidth());\n\t\t\tEX.debug(\"scrollWidth :\" , exports.scrollWidth(\"px\"));\n\t\t});\n\t</script>\n\t</head>\n\t<body>\n\t<div style=\"width:2000px; height:3000px;\"></div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Number || String"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 335,
            "description": "문서의 height size를 반환합니다.",
            "itemtype": "method",
            "name": "scrollHeight",
            "static": 1,
            "params": [
                {
                    "name": "ext",
                    "description": "반환될 값에 지정된 타입을 붙여 반환합니다. 예를 들어 반환값이 1024 일 때 \"px\" 이라는 문자열을 보낼경우 반환값은 1024 가 아닌 \"1024px\" 로 반환합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debug(\"scrollHeight : \", EXBrowser.scrollHeight());\n\t\t\tEX.debug(\"scrollHeight : \", EXBrowser.scrollHeight(\"px\"));\n\t\t});\n\t})();\n\t</script>\n\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "retrun": "{Number || String}",
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 372,
            "description": "문서의 screenWidth 의 값을 반환합니다.",
            "itemtype": "method",
            "name": "screenWidth",
            "static": 1,
            "params": [
                {
                    "name": "ext",
                    "description": "반환될 값에 지정된 타입을 붙여 반환합니다. 예를 들어 반환값이 1024 일 때 \"px\" 이라는 문자열을 보낼경우 반환값은 1024 가 아닌 \"1024px\" 로 반환합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debug(\"screenWidth : \", EXBrowser.screenWidth());\n\t\t\tEX.debug(\"screenWidth : \", EXBrowser.screenWidth(\"px\"));\n\t\t\tEX.debug(\"scrollWidth : \", EXBrowser.scrollWidth());\n\t\t\tEX.debug(\"scrollWidth : \", EXBrowser.scrollWidth(\"px\"));\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t<div style=\"width:3000px; height:3000px; background-color:#ffff00;\"></div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Number || String"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 417,
            "description": "문서의 screenHeight 의 값을 반환합니다.",
            "itemtype": "method",
            "name": "screenHeight",
            "static": 1,
            "params": [
                {
                    "name": "ext",
                    "description": "반환될 값에 지정된 타입을 붙여 반환합니다. 예를 들어 반환값이 1024 일 때 \"px\" 이라는 문자열을 보낼경우 반환값은 1024 가 아닌 \"1024px\" 로 반환합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debug(\"screenHeight : \", EXBrowser.screenHeight());\n\t\t\tEX.debug(\"screenHeight : \", EXBrowser.screenHeight(\"px\"));\n\t\t\tEX.debug(\"scrollHeight : \", EXBrowser.scrollHeight());\n\t\t\tEX.debug(\"scrollHeight : \", EXBrowser.scrollHeight(\"px\"));\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t<div style=\"width:3000px; height:3000px; background-color:#ffff00;\"></div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Number || String"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 462,
            "description": "HTML 문서 자체의 스크롤 핸들링을 담당하고 있는 객체를 반환합니다.",
            "itemtype": "method",
            "name": "getScrollTarget",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<script type=\"text/javascript\" src=\"../../vw/utils/VWUtils_1.0.0.js\"></script>\n\t<style type=\"text/css\">\n\t.box {}\n\t.box li { margin:10px; height:500px; background-color:#cccccc; }\n\t</style>\n\t</head>\n\t<body>\n\t<div class=\"box\">\n\t\t<ul>\n\t\t<li>1</li>\n\t\t<li>2</li>\n\t\t<li>3</li>\n\t\t</ul>\n\t</div>\n\t</body>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tvar scrollTarget = exports.getScrollTarget();\n\t\tvar cnt = 0;\n\t\tvar interval = setInterval(function(){\n\t\t\tscrollTarget.scrollTop = cnt;\n\t\t\tcnt += 5;\n\t\t\tif(cnt >= 200) clearInterval(interval);\n\t\t} , 10);\n\t\t\n\t})();\n\t</script>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Document || HTMLElement"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 510,
            "description": "해당 문서의 최상위 Document 를 반환합니다.",
            "itemtype": "method",
            "name": "getSuperDocument",
            "static": 1,
            "return": {
                "description": "",
                "type": "Document"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 524,
            "description": "문서의 drag, select (반전)기능을 제어합니다.",
            "itemtype": "method",
            "name": "setDragSelectAble",
            "static": 1,
            "params": [
                {
                    "name": "able",
                    "description": "false 일 경우 dragstart,selectstart,userSelect 등을 block 합니다. 브라우져 기본 상태는 true 로 set 할때와 같다.",
                    "type": "Boolean"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar btn = document.getElementById(\"btn\");\n\t\t\tvar toggle = false;\n\t\t\tbtn.onclick = function(){\n\t\t\t\tEXBrowser.setDragSelectAble(toggle);\n\t\t\t\ttoggle = !toggle;\n\t\t\t};\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t<button id=\"btn\">set drag&select toggle</button>\n\t<div>\n\t\t<br/>drag drag drag drag drag\n\t\t<br/>drag drag drag drag drag\n\t\t<br/>drag drag drag drag drag\n\t</div>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Document"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 577,
            "description": "해당 페이지의 URL 을 반환합니다.",
            "itemtype": "method",
            "name": "getLocation",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debug(\"getLocation :\" , EXBrowser.getLocation());\n\t\t\tEX.debug(\"getLocation :\" , EXBrowser.getLocation(false));\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 617,
            "description": "해당 페이지의 GET 형태의 parameter 를 반환합니다. URL 을 이용한 파싱이기 때문에 GET 방식외 전달 방식은 반환되지 않습니다.",
            "itemtype": "method",
            "name": "getLocationParams",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar params = EXBrowser.getLocationParams();\n\t\t\tvar key = null;\n\t\t\tfor( key in params ){\n\t\t\t\tEX.debug(\"getLocationParams \" , key+\" :\" , params[key] );\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t\t<button onclick=\"window.location=window.location+'?a=1&b=2&c=3'\">test</button>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 670,
            "description": "해당 페이지의 URL 중 anchor(#) 값을 추출해 반환합니다.",
            "itemtype": "method",
            "name": "getLocationAnchor",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar anchor = EXBrowser.getLocationAnchor();\n\t\t\tEX.debug(\"getLocationAnchor : \", anchor);\n\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t\t<button onclick=\"window.location.replace(window.location+'#abc'); window.location.reload(true)\">test</button>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 709,
            "description": "해당 페이지 URL 의 anchor(#)를 바꿉니다.",
            "itemtype": "method",
            "name": "switchLocationAnchor",
            "static": 1,
            "params": [
                {
                    "name": "switchAnchor",
                    "description": "기존 URL 에서 바꾸거나 적용할 anchor(문자열).",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEXBrowser.switchLocationAnchor(\"experjs\");\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXBrowser.js",
            "line": 747,
            "description": "parameter fileURLStr 을 문자열로 전달받고, 해당 문자열의 파일 확장자를 반환합니다.",
            "itemtype": "method",
            "name": "getFileExtension",
            "static": 1,
            "params": [
                {
                    "name": "fileURLStr",
                    "description": "파일 확장자를 추출할 대상이 되는 문자열.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXBrowser\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debug( EXBrowser.getFileExtension(EXBrowser.getLocation()) );\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXBrowser"
        },
        {
            "file": "experJS\\utils\\EXCompare.js",
            "line": 6,
            "description": "해당 객체가 사용 가능한 객체(null,undefined 외) 인지 확인합니다.",
            "itemtype": "method",
            "name": "isAble",
            "static": 1,
            "params": [
                {
                    "name": "compare",
                    "description": "확인 대상이 될 객체.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXCompare\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\t\n\t\t\tvar compare;\n\t\t\tEX.debug( \"isAble : \" , EXCompare.isAble(compare) );\n\t\t\tcompare = null;\n\t\t\tEX.debug( \"isAble : \" , EXCompare.isAble(compare) );\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXCompare"
        },
        {
            "file": "experJS\\utils\\EXCompare.js",
            "line": 46,
            "description": "해당 객체의 타입이 Array 인지 확인합니다.",
            "itemtype": "method",
            "name": "isArray",
            "static": 1,
            "params": [
                {
                    "name": "compare",
                    "description": "확인 대상이 될 객체.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXCompare\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\t\n\t\t\tvar compare;\n\t\t\tEX.debug( \"isArray : \" , EXCompare.isArray(compare) );\n\t\t\tcompare = [1,2,3];\n\t\t\tEX.debug( \"isArray : \" , EXCompare.isArray(compare) );\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXCompare"
        },
        {
            "file": "experJS\\utils\\EXCompare.js",
            "line": 85,
            "description": "해당 객체의 타입이 Function 인지 확인합니다.",
            "itemtype": "method",
            "name": "isFunction",
            "static": 1,
            "params": [
                {
                    "name": "compare",
                    "description": "확인 대상이 될 객체.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXCompare\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\t\n\t\t\tvar compare;\n\t\t\tEX.debug( \"isFunction : \" , EXCompare.isFunction(compare) );\n\t\t\tcompare = function(){};\n\t\t\tEX.debug( \"isFunction : \" , EXCompare.isFunction(compare) );\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXCompare"
        },
        {
            "file": "experJS\\utils\\EXCompare.js",
            "line": 124,
            "description": "해당 객체의 타입이 String 인지 확인합니다.",
            "itemtype": "method",
            "name": "isString",
            "static": 1,
            "params": [
                {
                    "name": "compare",
                    "description": "확인 대상이 될 객체.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXCompare\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\t\n\t\t\tvar compare;\n\t\t\tEX.debug( \"isString : \" , EXCompare.isString(compare) );\n\t\t\tcompare = \"123\";\n\t\t\tEX.debug( \"isString : \" , EXCompare.isString(compare) );\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXCompare"
        },
        {
            "file": "experJS\\utils\\EXCompare.js",
            "line": 163,
            "description": "해당 객체의 타입이 Number 인지 확인합니다.",
            "itemtype": "method",
            "name": "isNumber",
            "static": 1,
            "params": [
                {
                    "name": "compare",
                    "description": "확인 대상이 될 객체.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXCompare\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\t\n\t\t\tvar compare;\n\t\t\tEX.debug( \"isNumber : \" , EXCompare.isNumber(compare) );\n\t\t\tcompare = 123;\n\t\t\tEX.debug( \"isNumber : \" , EXCompare.isNumber(compare) );\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXCompare"
        },
        {
            "file": "experJS\\utils\\EXCompare.js",
            "line": 202,
            "description": "해당 객체의 타입이 Object 인지 확인합니다.",
            "itemtype": "method",
            "name": "isObject",
            "static": 1,
            "params": [
                {
                    "name": "compare",
                    "description": "확인 대상이 될 객체.",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXCompare\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\t\n\t\t\tvar compare;\n\t\t\tEX.debug( \"isObject : \" , EXCompare.isObject(compare) );\n\t\t\tcompare = { a: 1, b: 2 };\n\t\t\tEX.debug( \"isObject : \" , EXCompare.isObject(compare) );\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXCompare"
        },
        {
            "file": "experJS\\utils\\EXCookie.js",
            "line": 15,
            "description": "쿠키에 데이터를 씁니다.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "쿠키의 key",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "쿠키의 value",
                    "type": "String"
                },
                {
                    "name": "expireSecond",
                    "description": "쿠키의 파기 시간.(초 단위)",
                    "type": "Integer"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXCookie\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\n\t\t\tEX.debug(EXCookie.getBoolean(\"a\"));\n\t\t\tEXCookie.set(\"a\" , \"123\" , 10);\n\t\t\tEX.debug(EXCookie.getBoolean(\"a\"));\n\t\t\tEX.debug(EXCookie.getValue(\"a\"));\n\t\t\tEX.debug(EXCookie.getCookieToObject(\"a\"));\n\t\t\tEXCookie.remove(\"a\" , \"123\" , 10);\n\t\t\tEX.debug(EXCookie.getBoolean(\"a\"));\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXCookie"
        },
        {
            "file": "experJS\\utils\\EXCookie.js",
            "line": 62,
            "description": "쿠키의 지정된 key 에 대한 데이터를 찾아 value 를 반환합니다.",
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "key",
                    "description": "쿠키의 key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXCookie"
        },
        {
            "file": "experJS\\utils\\EXCookie.js",
            "line": 75,
            "description": "쿠키의 지정된 key 에 대한 데이터가 있을 경우 true 없을 경우 false 를 반환합니다.",
            "itemtype": "method",
            "name": "getBoolean",
            "params": [
                {
                    "name": "key",
                    "description": "쿠키의 key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXCookie"
        },
        {
            "file": "experJS\\utils\\EXCookie.js",
            "line": 88,
            "description": "쿠키의 지정된 key 에 대한 데이터를 삭제 합니다.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "key",
                    "description": "쿠키의 key",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXCookie"
        },
        {
            "file": "experJS\\utils\\EXCookie.js",
            "line": 98,
            "description": "쿠키에 지정된 모든 데이터를 찾아 Object 형태로 key&value 로 바인딩하여 반환합니다.",
            "itemtype": "method",
            "name": "getCookieToObject",
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "EXCookie"
        },
        {
            "file": "experJS\\utils\\EXCookie.js",
            "line": 119,
            "description": "1분. 쿠키 데이터에서 사용하는 expire 를 지정할 때 사용합니다.",
            "itemtype": "property",
            "name": "TIME_1_MINUTE",
            "static": 1,
            "final": 1,
            "default": "60",
            "class": "EXCookie"
        },
        {
            "file": "experJS\\utils\\EXCookie.js",
            "line": 128,
            "description": "1시간. 쿠키 데이터에서 사용하는 expire 를 지정할 때 사용합니다.",
            "itemtype": "property",
            "name": "TIME_1_HOUR",
            "static": 1,
            "final": 1,
            "default": "3600",
            "class": "EXCookie"
        },
        {
            "file": "experJS\\utils\\EXCookie.js",
            "line": 137,
            "description": "1일. 쿠키 데이터에서 사용하는 expire 를 지정할 때 사용합니다.",
            "itemtype": "property",
            "name": "TIME_1_DAY",
            "static": 1,
            "final": 1,
            "default": "86400",
            "class": "EXCookie"
        },
        {
            "file": "experJS\\utils\\EXCookie.js",
            "line": 146,
            "description": "1주일. 쿠키 데이터에서 사용하는 expire 를 지정할 때 사용합니다.",
            "itemtype": "property",
            "name": "TIME_1_WEEK",
            "static": 1,
            "final": 1,
            "default": "604800",
            "class": "EXCookie"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 7,
            "description": "기존 클래스명은 유지한 상태로 parameter 로 전달되는 클래스명을 추가하며, 중복되는(이미 지정된) 클래스는 추가하지 않습니다.",
            "itemtype": "method",
            "name": "addClass",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXElement\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\n\t\t\tvar btn = document.getElementById(\"btn\");\n\t\t\tvar box = document.getElementById(\"box\");\n\t\t\tvar count = 0;\n\n\t\t\tbtn.onclick = function(){\n\t\t\t\tcount++;\n\t\t\t\tif(count > 3) count = 0;\n\t\t\t\tswitch(count){\n\t\t\t\t\tcase 0 :\n\t\t\t\t\t\tbox.className = \"default\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1 :\n\t\t\t\t\t\tEXElement.addClass(box , \"type1\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2 :\n\t\t\t\t\t\tEXElement.addClass(box , \"type2\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3 :\n\t\t\t\t\t\tEXElement.addClass(box , \"type3\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tEX.debug(\"box className : \" , box.className);\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t<style type=\"text/css\">\n\t#box { width:100px; height:100px; background-color:#ff0000; }\n\t#box.default { font-size:0.8em; font-weight:bold; color:#ffffff; background-color:#000000; }\n\t#box.type1 { color:#ffff00; }\n\t#box.type2 { background-color:#ff0000; }\n\t#box.type3 { font-size:1.2em; }\n\t</style>\n\t</head>\n\t<body>\n\t<button id=\"btn\">addClass</button>\n\t<div id=\"box\" class=\"default\">test box</div>\n\t</body>\n\t</html>"
            ],
            "params": [
                {
                    "name": "element",
                    "description": "클래스 명을 추가할 HTMLElement 객체",
                    "type": "HTMLElement"
                },
                {
                    "name": "addName",
                    "description": "추가할 클래스명",
                    "type": "String"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 84,
            "description": "parameter 로 전달되는 클래스명과 일치하는 클래스명이 있다면, 해당 클래스를 제거합니다.",
            "itemtype": "method",
            "name": "removeClass",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXElement\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\n\t\t\tvar btn = document.getElementById(\"btn\");\n\t\t\tvar box = document.getElementById(\"box\");\n\t\t\tvar count = 0;\n\n\t\t\tbtn.onclick = function(){\n\t\t\t\tcount++;\n\t\t\t\tif(count > 3) count = 0;\n\t\t\t\tswitch(count){\n\t\t\t\t\tcase 0 :\n\t\t\t\t\t\tbox.className = \"default type1 type2 type3\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1 :\n\t\t\t\t\t\tEXElement.removeClass(box , \"type1\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2 :\n\t\t\t\t\t\tEXElement.removeClass(box , \"type2\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3 :\n\t\t\t\t\t\tEXElement.removeClass(box , \"type3\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tEX.debug(\"box className : \" , box.className);\n\t\t\t}\n\t\t});\n\t})();\n\t</script>\n\n\t<style type=\"text/css\">\n\t#box { width:100px; height:100px; background-color:#ff0000; }\n\t#box.default { font-size:0.8em; font-weight:bold; color:#ffffff; background-color:#000000; }\n\t#box.type1 { color:#000000; }\n\t#box.type2 { background-color:#ff0000; }\n\t#box.type3 { font-size:1.2em; }\n\t</style>\n\t</head>\n\t<body>\n\t<button id=\"btn\">addClass</button>\n\t<div id=\"box\" class=\"default type1 type2 type3\">test box</div>\n\t</body>\n\t</html>"
            ],
            "params": [
                {
                    "name": "element",
                    "description": "클래스 명을 제거할 HTMLElement 객체",
                    "type": "HTMLElement"
                },
                {
                    "name": "addName",
                    "description": "제거할 클래스명",
                    "type": "String"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 158,
            "description": "styleProperty 에 지정된 style 명(css의 key)에 대한 value 값을 반환합니다.",
            "itemtype": "method",
            "name": "getStyle",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXElement\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar box = document.getElementById(\"box\");\n\t\t\tEX.debug(\"getStyle background-color : \" , EXElement.getStyle(box , \"background-color\") );\n\t\t\tEX.debug(\"getStyle border-top : \" , EXElement.getStyle(box , \"border-top\") );\n\t\t\tEX.debug(\"getStyle border-top-width : \" , EXElement.getStyle(box , \"border-top-width\") );\n\t\t\tEX.debug(\"getStyle border-top-color : \" , EXElement.getStyle(box , \"border-top-color\") );\n\t\t});\n\t})();\n\t</script>\n\n\t<style type=\"text/css\">\n\t#box { width:100px; height:100px; border:3px solid #000000; background-color:#ff0000; }\n\t</style>\n\t</head>\n\t<body>\n\t<div id=\"box\" class=\"default\">test box</div>\n\t</body>\n\t</html>"
            ],
            "params": [
                {
                    "name": "element",
                    "description": "클래스 명을 제거할 HTMLElement 객체",
                    "type": "HTMLElement"
                },
                {
                    "name": "styleProperty",
                    "description": "객체로 부터 얻어올 style 프로퍼티.(css명)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 226,
            "description": "HTMLElement 객체의 background-position을 설정합니다.",
            "itemtype": "method",
            "name": "setElementBackgroundPosition",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "background-position을 설정할 대상이 되는 객체.",
                    "type": "HTMLElement"
                },
                {
                    "name": "backgroundPosX",
                    "description": "background-position-x의 number/string value. example) 100, \"100px\", \"100%\", null",
                    "type": "Number"
                },
                {
                    "name": "backgroundPosY",
                    "description": "background-position-y의 number/string value. example) 100, \"100px\", \"100%\", null",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 274,
            "description": "HTMLElement 객체 자신을 부모로 부터 제거합니다.",
            "itemtype": "method",
            "name": "removeMe",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "removeChild시킬 대상이 되는 객체.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 285,
            "description": "HTMLElement 객체가 포함하는 모든 HTMLElement를 removeChild합니다.",
            "itemtype": "method",
            "name": "removeAllChildren",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXElement\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar wrapper = document.getElementById(\"wrapper\");\n\t\t\tvar box = document.getElementById(\"box\");\n\t\t\tEXElement.removeAllChildren(wrapper);\n\t\t});\n\t})();\n\t</script>\n\n\t<style type=\"text/css\">\n\t#box { width:100px; height:100px; border:3px solid #000000; background-color:#ff0000; }\n\t</style>\n\t</head>\n\t<body>\n\t<div id=\"wrapper\" style=\"padding:20px; background-color:#eeeeee;\">\n\t\t<div id=\"box\" class=\"default\">test box</div>\n\t\t<div id=\"box\" class=\"default\">test box</div>\n\t\t<div id=\"box\" class=\"default\">test box</div>\n\t\t<div id=\"box\" class=\"default\">test box</div>\n\t\t<div id=\"box\" class=\"default\">test box</div>\n\t</div>\n\t</body>\n\t</html>"
            ],
            "params": [
                {
                    "name": "element",
                    "description": "child HTMLElement를 removeChild시킬 대상이 되는 객체.",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 332,
            "description": "HTMLElement 객체의 모든 parentNode를 배열에 담아 반환합니다.",
            "itemtype": "method",
            "name": "getParentNodes",
            "static": 1,
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../../experJS\");\n\t\tEX.include(\"utils/EXElement\");\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tvar box = document.getElementById(\"box\");\n\t\t\tEX.debug(EXElement.getParentNodes(box));\n\t\t});\n\t})();\n\t</script>\n\n\t<style type=\"text/css\">\n\t#box { width:100px; height:100px; border:3px solid #000000; background-color:#ff0000; }\n\t</style>\n\t</head>\n\t<body>\n\t<div id=\"wrapper\" style=\"padding:20px; background-color:#eeeeee;\">\n\t\t<div id=\"wp1\">\n\t\t\t<div id=\"wp2\">\n\t\t\t\t<div id=\"wp3\">\n\t\t\t\t\t<div id=\"box\" class=\"default\">test box</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t</body>\n\t</html>"
            ],
            "params": [
                {
                    "name": "element",
                    "description": "parent node가 존재하는 객체",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 389,
            "description": "HTMLElement 객체의 document Global X 좌표를 반환합니다.",
            "itemtype": "method",
            "name": "getElementGlobalPositionX",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "대상 객체",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 405,
            "description": "HTMLElement 객체의 document Global Y 좌표를 반환합니다.",
            "itemtype": "method",
            "name": "getElementGlobalPositionY",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "대상 객체",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 421,
            "description": "HTMLElement 객체의 parentNode 내부에서의 x 좌표를 반환합니다.(Javascript나 CSS로 style을 지정하지 않은 element의 x 위치를 얻어야 할 경우, 사용합니다.)",
            "itemtype": "method",
            "name": "getElementOffsetLeft",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "대상 객체",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 432,
            "description": "HTMLElement 객체의 parentNode 내부에서의 y 좌표를 반환합니다.(Javascript나 CSS로 style을 지정하지 않은 element의 y 위치를 얻어야 할 경우, 사용합니다.)",
            "itemtype": "method",
            "name": "getElementOffsetTop",
            "static": 1,
            "params": [
                {
                    "name": "element",
                    "description": "대상 객체",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXElement.js",
            "line": 443,
            "description": "파라미터로 주어진 html 코드의 최상위 HTMLElement 의 offset 사이즈 값을 반환합니다.",
            "itemtype": "method",
            "name": "getLoadedHtmlOffset",
            "static": 1,
            "params": [
                {
                    "name": "loadedHTML",
                    "description": "HTML Syntax. 해당 HTML 코드의 최상위 객체의 offset 사이즈를 반환합니다.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "{ width: loadedHTML 가로사이즈 , height: loadedHTML 세로사이즈 }",
                "type": "Object"
            },
            "class": "EXElement"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 7,
            "description": "지정된 최소, 최대값 사이의 정수 값을 랜덤으로 반환합니다.",
            "itemtype": "method",
            "name": "getRandomToInt",
            "static": 1,
            "params": [
                {
                    "name": "min",
                    "description": "얻어 낼 랜덤값의 가장 작은 수.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "얻어 낼 랜덤값의 가장 큰 수.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 20,
            "description": "지정된 최소, 최대값 사이의 소수 포함 정수 값을 랜덤으로 반환합니다.",
            "itemtype": "method",
            "name": "getRandomToNumber",
            "static": 1,
            "params": [
                {
                    "name": "min",
                    "description": "얻어 낼 랜덤값의 가장 작은 수.",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "얻어 낼 랜덤값의 가장 큰 수.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 33,
            "description": "지정된 arguments 의 평균 값을 반환합니다.",
            "itemtype": "method",
            "name": "average",
            "static": 1,
            "params": [
                {
                    "name": "...",
                    "description": "",
                    "type": "Arguments"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 52,
            "description": "밑변의 길이와 밑변의 예각을 이용하여, 직각 삼각형의 높이를 반환합니다.",
            "itemtype": "method",
            "name": "getHeightFromTriangleBaseLineAngle",
            "static": 1,
            "params": [
                {
                    "name": "baseLineWidth",
                    "description": "직각 삼각형의 밑변의 길이",
                    "type": "Number"
                },
                {
                    "name": "degreeAngle",
                    "description": "직각 삼각형의 밑변의 예각 크기",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 65,
            "description": "linePoint_1 과 linePoint_2를 지나는 직선 상의, somePoint가 직교하는 Point Object를 반환합니다.",
            "itemtype": "method",
            "name": "getCrossPointBetweenTwoPointsLineAndSomePoint",
            "static": 1,
            "params": [
                {
                    "name": "somePoint",
                    "description": "x, y 변수를 지니는 point object",
                    "type": "Object"
                },
                {
                    "name": "linePoint_1",
                    "description": "x, y 변수를 지니는 point object",
                    "type": "Object"
                },
                {
                    "name": "linePoint_2",
                    "description": "x, y 변수를 지니는 point object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "x , y",
                "type": "Object"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 89,
            "description": "radian value 를 호도각 value로 변환하여 반환합니다.",
            "itemtype": "method",
            "name": "radianToDegree",
            "static": 1,
            "params": [
                {
                    "name": "degree",
                    "description": "radian number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 100,
            "description": "호도각 value를 radian value로 변환하여 반환합니다.",
            "itemtype": "method",
            "name": "degreeToRadian",
            "static": 1,
            "params": [
                {
                    "name": "degree",
                    "description": "호도각 number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 111,
            "description": "두 point 사이의 거리를 반환합니다.",
            "itemtype": "method",
            "name": "getDistanceBetweenTwoPoints",
            "static": 1,
            "params": [
                {
                    "name": "point1_x",
                    "description": "x, y 변수를 지니는 point object",
                    "type": "Object"
                },
                {
                    "name": "point1_y",
                    "description": "x, y 변수를 지니는 point object",
                    "type": "Object"
                },
                {
                    "name": "point2_x",
                    "description": "x, y 변수를 지니는 point object",
                    "type": "Object"
                },
                {
                    "name": "point2_y",
                    "description": "x, y 변수를 지니는 point object",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 126,
            "description": "두 point 사이의 특정 percent의 Point Object를 반환합니다.",
            "itemtype": "method",
            "name": "getPercentagePointBetweenTwoPoints",
            "static": 1,
            "params": [
                {
                    "name": "point1_x",
                    "description": "첫번째 point의 x 위치 number",
                    "type": "Number"
                },
                {
                    "name": "point1_y",
                    "description": "첫번째 point의 y 위치 number",
                    "type": "Number"
                },
                {
                    "name": "point2_x",
                    "description": "두번째 point의 x 위치 number",
                    "type": "Number"
                },
                {
                    "name": "point2_y",
                    "description": "두번째 point의 y 위치 number",
                    "type": "Number"
                },
                {
                    "name": "percentage",
                    "description": "0 ~ 1 사이의 float number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "x , y",
                "type": "Object"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 143,
            "description": "특정 각도를 기본 각도 단위인 -179 ~ 180 으로 변화하여 반환합니다.",
            "itemtype": "method",
            "name": "getAngleBasedOnSystem",
            "static": 1,
            "params": [
                {
                    "name": "degree",
                    "description": "호도각 number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 156,
            "description": "standardPoint를 기준점으로, targetPoint를 degree만큼 회전시켰을 때의 point 위치를 반환합니다.",
            "itemtype": "method",
            "name": "getRotatedPointAroundStandardPoint",
            "static": 1,
            "params": [
                {
                    "name": "standardPointX",
                    "description": "기준점의 x 위치",
                    "type": "Number"
                },
                {
                    "name": "standardPointY",
                    "description": "x, y 변수를 지니는 point object",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "기준점을 중심으로 지니는 원의 반지름",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "x , y",
                "type": "Object"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 172,
            "description": "특정 x,y 위치를 기준점으로 _radius value를 반지름으로 가지는 원 내부의 random한 Point를 반환합니다.",
            "itemtype": "method",
            "name": "getRandomSurroundPoint",
            "static": 1,
            "params": [
                {
                    "name": "standardPointX",
                    "description": "기준점의 x 위치",
                    "type": "Number"
                },
                {
                    "name": "standardPointY",
                    "description": "x, y 변수를 지니는 point object",
                    "type": "Number"
                },
                {
                    "name": "radius",
                    "description": "기준점을 중심으로 지니는 원의 반지름",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "x , y",
                "type": "Object"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 189,
            "description": "parameter float value의 양수 판별 여부를 반환합니다. (0은 양수로 간주합니다.)",
            "itemtype": "method",
            "name": "getFlagPositiveNumber",
            "static": 1,
            "params": [
                {
                    "name": "valueFloat",
                    "description": "검사할 number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 201,
            "description": "1 또는 -1 int value을 random하게 반환합니다.",
            "itemtype": "method",
            "name": "getRandomPositiveNegative",
            "static": 1,
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 213,
            "description": "parameter로 전달되는 모든 값들의 합을 반환합니다.",
            "itemtype": "method",
            "name": "sum",
            "static": 1,
            "params": [
                {
                    "name": "합산에",
                    "description": "사용도는 number 나열",
                    "type": "Arguments"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 228,
            "description": "float value를  Ceil 연산을 적용, 특정 10 단위 or 특정 소수점 단위로 변환하여 반환합니다.",
            "itemtype": "method",
            "name": "ceilUnit",
            "static": 1,
            "params": [
                {
                    "name": "valueFloat",
                    "description": "연산을 적용할 number",
                    "type": "Number"
                },
                {
                    "name": "uintInTheTens",
                    "description": "단위 number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 240,
            "description": "number value를  round 연산을 적용, 특정 10 단위 or 특정 소수점 단위로 변환하여 반환합니다.",
            "itemtype": "method",
            "name": "roundUnit",
            "static": 1,
            "params": [
                {
                    "name": "valueFloat",
                    "description": "연산을 적용할 number",
                    "type": "Number"
                },
                {
                    "name": "uintInTheTens",
                    "description": "단위 number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 252,
            "description": "number value를  floor 연산을 적용, 특정 10 단위 or 특정 소수점 단위로 변환하여 반환합니다.",
            "itemtype": "method",
            "name": "floorUnit",
            "static": 1,
            "params": [
                {
                    "name": "valueFloat",
                    "description": "연산을 적용할 number",
                    "type": "Number"
                },
                {
                    "name": "uintInTheTens",
                    "description": "단위 number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 264,
            "description": "지정된 최소 ~ 최대값 사이의 특정 value를, 다른 최소 ~ 최대값 영역 사이의 value로 치환하여 출력합니다.",
            "itemtype": "method",
            "name": "getRemapValue",
            "static": 1,
            "params": [
                {
                    "name": "targetValueFloat",
                    "description": "최소, 최대값 사이의 특정 number"
                },
                {
                    "name": "minValueFloat",
                    "description": "최소 범위값"
                },
                {
                    "name": "maxValueFloat",
                    "description": "최대 범위값"
                },
                {
                    "name": "remapMinValueFloat",
                    "description": "remap 최소 범위값"
                },
                {
                    "name": "remapMaxValueFloat",
                    "description": "remap 최대 범위값"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 279,
            "description": "int value를 나눌 수 있는 100 미만의 최소 소수 반환(100 미만의 소수로 나눌 수 없을 경우, -1 반환) 합니다.",
            "itemtype": "method",
            "name": "getDivisibleMinPrimeNumberUnderOneHundred",
            "static": 1,
            "params": [
                {
                    "name": "uintValue",
                    "description": "0 이상의 number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXMath.js",
            "line": 298,
            "description": "int value의 짝수 여부 반환(0은 짝수로 간주) 합니다.",
            "itemtype": "method",
            "name": "getDivisibleMinPrimeNumberUnderOneHundred",
            "static": 1,
            "params": [
                {
                    "name": "intValue",
                    "description": "int number",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "EXMath"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 6,
            "description": "문자열의 공백을 모두 제거합니다.",
            "itemtype": "method",
            "name": "removeWhiteSpace",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "제거할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 19,
            "description": "문자열의 좌,우 공백을 제거합니다.",
            "itemtype": "method",
            "name": "trim",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "좌,우 공백을 제거할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 32,
            "description": "문자열의 좌측 공백을 제거합니다.",
            "itemtype": "method",
            "name": "leftTrim",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "좌측 공백을 제거할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 46,
            "description": "문자열의 우측 공백을 제거합니다.",
            "itemtype": "method",
            "name": "rightTrim",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "우측 공백을 제거할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 62,
            "description": "parameter 의 str 에 지정된 문자열을 대상으로 find 문자(열)을 rpl 문자(열)로 모두 변경합니다.",
            "itemtype": "method",
            "name": "replaceAll",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "변경 대상이 될 문자열.",
                    "type": "String"
                },
                {
                    "name": "find",
                    "description": "변경할 문자(열).",
                    "type": "String"
                },
                {
                    "name": "rpl",
                    "description": "변경될 문자(열).",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 75,
            "description": "문자열의 태그가 포함되어 있을시 태그에 해당하는 문자열을 제거합니다.",
            "itemtype": "method",
            "name": "removeTag",
            "static": 1,
            "params": [
                {
                    "name": "tagString",
                    "description": "태그를 제거할 문자열.",
                    "type": "String"
                },
                {
                    "name": "[trim",
                    "description": "= false]  변경 중 양쪽 공백 제거.",
                    "type": "Boolean"
                },
                {
                    "name": "[removeTab",
                    "description": "= false]  변경 중 탭(\\t) 문자 제거.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 92,
            "description": "문자열의 태그가 포함되어 있을시 태그에 해당하는 문자열을 제거합니다.",
            "itemtype": "method",
            "name": "replaceTypeToPrice",
            "static": 1,
            "params": [
                {
                    "name": "number",
                    "description": "변경할 대상이 되는 숫자.",
                    "type": "Number"
                },
                {
                    "name": "[addStr",
                    "description": "= \",\"]  구분자 문자.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 124,
            "description": "지정된 문자열의 첫 글자를 대문자로 변경하여 반환합니다.",
            "itemtype": "method",
            "name": "toUpperCaseHead",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 136,
            "description": "문자열의 문자를 구분으로 분할하여 배열로 반환합니다.",
            "itemtype": "method",
            "name": "convertCharToArray",
            "params": [
                {
                    "name": "str",
                    "description": "원본 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 151,
            "description": "문자열의 단어를 구분으로 분할하여 배열로 반환합니다.",
            "itemtype": "method",
            "name": "convertWordToArray",
            "params": [
                {
                    "name": "str",
                    "description": "원본 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 169,
            "description": "문자열을 지정된 인덱스에 삽입합니다.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "str",
                    "description": "원본 문자열.",
                    "type": "String"
                },
                {
                    "name": "addStr",
                    "description": "삽입할 문자열.",
                    "type": "Integer"
                },
                {
                    "name": "index",
                    "description": "addStr을 삽입할 인덱스.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "0"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 190,
            "description": "문자열을 지정된 인덱스만큼 제거합니다.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "str",
                    "description": "원본 문자열.",
                    "type": "String"
                },
                {
                    "name": "indexStart",
                    "description": "제거할 시작 인덱스.",
                    "type": "Integer"
                },
                {
                    "name": "indexEnd",
                    "description": "제거할 마지막 인덱스.(시작 인덱스의 상대적)",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 206,
            "description": "문자열을 지정된 숫자만큼 잘라내어 반환합니다.",
            "itemtype": "method",
            "name": "abbreviate",
            "params": [
                {
                    "name": "str",
                    "description": "잘라낼 문자열.",
                    "type": "String"
                },
                {
                    "name": "maxLength",
                    "description": "잘라낼 최대 길이.",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 217,
            "description": "str 문자열에 포함되는 문자(열)이 모두 포함이 되는지 검사합니다.",
            "itemtype": "method",
            "name": "containsHas",
            "params": [
                {
                    "name": "str",
                    "description": "검사할 문자열.",
                    "type": "String"
                },
                {
                    "name": "aguments",
                    "description": "포함이 되는지 검사할 문자열.",
                    "type": "...String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 244,
            "description": "str 문자열에 포함되는 문자(열)이 하나라도 포함이 되는지 검사합니다.",
            "itemtype": "method",
            "name": "containsAny",
            "params": [
                {
                    "name": "str",
                    "description": "검사할 문자열.",
                    "type": "String"
                },
                {
                    "name": "aguments",
                    "description": "포함이 되는지 검사할 문자열.",
                    "type": "...String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 269,
            "description": "대문자는 소문자로 소문자는 대문자로 변경합니다.",
            "itemtype": "method",
            "name": "swapCase",
            "params": [
                {
                    "name": "str",
                    "description": "변경할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 293,
            "description": "문자 타입이 숫자인지 확인합니다.",
            "itemtype": "method",
            "name": "checkCharNum",
            "params": [
                {
                    "name": "character",
                    "description": "검사할 문자.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 304,
            "description": "문자 타입이 영문인지 확인합니다.",
            "itemtype": "method",
            "name": "checkCharEng",
            "params": [
                {
                    "name": "character",
                    "description": "검사할 문자.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 315,
            "description": "문자 타입이 영문 or 숫자인지 확인합니다.",
            "itemtype": "method",
            "name": "checkCharNumEng",
            "params": [
                {
                    "name": "character",
                    "description": "검사할 문자.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 326,
            "description": "문자열이 숫자만 포함하는지 확인합니다.",
            "itemtype": "method",
            "name": "checkStringNum",
            "params": [
                {
                    "name": "str",
                    "description": "검사할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 337,
            "description": "문자열이 영문만 포함하는지 확인합니다.",
            "itemtype": "method",
            "name": "checkStringEng",
            "params": [
                {
                    "name": "str",
                    "description": "검사할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 348,
            "description": "문자열이 영문 or 숫자만 포함하는지 확인합니다.",
            "itemtype": "method",
            "name": "checkStringNumEng",
            "params": [
                {
                    "name": "str",
                    "description": "검사할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 362,
            "description": "json 형식의 문자열을 json 데이터로 변환합니다.",
            "itemtype": "method",
            "name": "toJson",
            "params": [
                {
                    "name": "jsonString",
                    "description": "json 형태로 변환할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "JSON"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 377,
            "description": "메일 주소를 검사하여 메일주소가 유효한지 검사합니다.\n<br/>(메일의 수신 여부를 검사하는게 아니라 메일 주소형식을 검사합니다!)",
            "itemtype": "method",
            "name": "isEmail",
            "static": 1,
            "params": [
                {
                    "name": "mailString",
                    "description": "메일 형식을 검사할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 390,
            "description": "단순히 검사할 문자열에 anchor(#)이 있는지 확인합니다.",
            "itemtype": "method",
            "name": "hasAnchor",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "anchor(#) 문자가 있는지 검사할 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolan"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 402,
            "description": "문자열의 anchor(#)를 추출하여 반환합니다.",
            "itemtype": "method",
            "name": "getAnchor",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "anchor(#)를 반환 받을 문자열.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 420,
            "description": "문장 내에 기본 영문자와 숫자, 기본 심볼 문자만이 존재하는지의 여부를 반환합니다.\n<br/>허용되는 문자: !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",
            "itemtype": "method",
            "name": "getFlagEnglishStr",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "검사할 문자열",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 445,
            "description": "String의 length가 특정한 숫자보다 길 경우, String을 특정한 숫자까지만 표기합니다. String의 마지막 글자 이후 cutAddStr String의 추가가 가능합니다.",
            "itemtype": "method",
            "name": "cutStrByIndex",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "검사할 문자열",
                    "type": "String"
                },
                {
                    "name": "cutStringIndex",
                    "description": "표기할 글자 수",
                    "type": "Integer"
                },
                {
                    "name": "cutAddStr",
                    "description": "추가할 문자열",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 467,
            "description": "문장 내의 각 한글 character를 초,성,성으로 분해하여 담은 Array(character가 한글이 아닐 경우에는 Array에 바로 담습니다)들을 별도의 Array에 순차적으로 담아 2차원 배열(Array) 형태로 반환합니다.",
            "itemtype": "method",
            "name": "breakSetenceStr",
            "static": 1,
            "params": [
                {
                    "name": "str",
                    "description": "분리할 문자열",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXString.js",
            "line": 485,
            "description": "한글 character를 초,중,종성으로 분해하여 Array에 담아 반환(character가 한글이 아닐 경우 Array에 담아 단순 반환) 합니다.",
            "itemtype": "method",
            "name": "breakCharacterStr",
            "static": 1,
            "params": [
                {
                    "name": "oneCharacterStr",
                    "description": "분리할 문자.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "EXString"
        },
        {
            "file": "experJS\\utils\\EXTimer.js",
            "line": 65,
            "description": "타이머를 시작합니다.",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTimer"
        },
        {
            "file": "experJS\\utils\\EXTimer.js",
            "line": 77,
            "description": "타이머를 중지합니다.",
            "itemtype": "method",
            "name": "stop",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTimer"
        },
        {
            "file": "experJS\\utils\\EXTimer.js",
            "line": 87,
            "description": "타이머를 중지합니다.",
            "itemtype": "method",
            "name": "count",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "EXTimer"
        },
        {
            "file": "experJS\\utils\\EXTimer.js",
            "line": 96,
            "description": "타이머가 생성된 후에 총 실행된 횟수를 반환합니다. start , stop 의 영향을 받지 않습니다.",
            "itemtype": "method",
            "name": "countAll",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "EXTimer"
        },
        {
            "file": "experJS\\utils\\EXTimer.js",
            "line": 105,
            "description": "타이머가 사용하는 모든 자원을 해제합니다.",
            "itemtype": "method",
            "name": "destroy",
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTimer"
        },
        {
            "file": "experJS\\utils\\EXTimer.js",
            "line": 116,
            "description": "타이머 이벤트의 콜백 함수를 등록합니다. 타이머가 dispatch 하는 이벤트는 예제와 Timer 의 property 를 참고하십시오.",
            "itemtype": "method",
            "name": "addListener",
            "params": [
                {
                    "name": "type",
                    "description": "이벤트 명. 예제와 Timer 의 property 를 참고하십시오.",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "이벤트 발생시 dispatch 될 콜백 함수.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTimer"
        },
        {
            "file": "experJS\\utils\\EXTimer.js",
            "line": 134,
            "description": "타이머 이벤트의 콜백 함수를 제거 합니다.",
            "itemtype": "method",
            "name": "removeListener",
            "params": [
                {
                    "name": "type",
                    "description": "이벤트 명.",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "이벤트 발생시 dispatch 될 콜백 함수.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "EXTimer"
        },
        {
            "file": "experJS\\utils\\EXTimer.js",
            "line": 203,
            "description": "타이머가 실행될 때마다 dispatch 될 이벤트명",
            "itemtype": "property",
            "name": "EVENT_TIMER",
            "type": "String",
            "static": 1,
            "final": 1,
            "class": "EXTimer"
        },
        {
            "file": "experJS\\utils\\EXTimer.js",
            "line": 211,
            "description": "타이머의 지정된 limit count 에 도달할때 dispatch 될 이벤트명.",
            "itemtype": "property",
            "name": "EVENT_TIMER_COMPLETE",
            "type": "String",
            "static": 1,
            "final": 1,
            "class": "EXTimer"
        },
        {
            "file": "experJS\\vender\\CssQuery.js",
            "line": 1213,
            "class": "requirejs"
        },
        {
            "file": "experJS\\experJS.js",
            "line": 71,
            "description": "EX 관련 라이브러리의 include 를 시작합니다.",
            "itemtype": "method",
            "name": "includeBegin",
            "static": 1,
            "params": [
                {
                    "name": "basePath",
                    "description": "include 의 기본 경로를 지정합니다.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\"); // basePath\n\t\tEX.include(\"events/EXEventListener\"); // class name EXEventListener\n\t\tEX.includeBegin(\"../../\"); // basePath\n\t\tEX.include(\"experJS/transitions/EXTween\"); // class name EXTween\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\" , EXEventListener);\n\t\t\tEX.debug(\"EX.ready\" , \"callback\" , EXTween);\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "class": "EX"
        },
        {
            "file": "experJS\\experJS.js",
            "line": 109,
            "description": "EX 관련 라이브러리를 include 합니다.\n<br/>include 호출 전 includeBegin 메소드 호출과 호출 후 includeEnd 메소드 호출이 이루어져야 합니다.",
            "itemtype": "method",
            "name": "include",
            "static": 1,
            "params": [
                {
                    "name": "packageClass",
                    "description": "include 할 class 의 경로 및 class name",
                    "type": "String"
                },
                {
                    "name": "compulsionName",
                    "description": "강제로 class 명을 변경 합니다.",
                    "type": "String"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"events/EXEventListener\"); // class name EXEventListener\n\t\tEX.include(\"transitions/EXTween\"); // class name EXTween\n\t\tEX.include(\"transitions/EXEasing\" , \"Easing\"); // compulsion class name Easing\n\t\tEX.includeEnd();\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX\" , \"ready\");\n\t\t\tEX.debug(EXEventListener);\n\t\t\tEX.debug(EXTween);\n\t\t\tEX.debug(Easing);\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "class": "EX"
        },
        {
            "file": "experJS\\experJS.js",
            "line": 162,
            "description": "include 지정을 확정하고 include 하는 파일(들)의 로드를 시작합니다.",
            "itemtype": "method",
            "name": "includeEnd",
            "static": 1,
            "params": [
                {
                    "name": "scope",
                    "description": "EX 에 의해 로드되는 클래스(들)을 바인딩 할 오브젝트.(기본 window)",
                    "type": "Object"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tvar foo = {};\n\t\tEX.includeBegin(\"../../experJS\");\n\t\tEX.include(\"transitions/EXTween\");\n\t\tEX.includeEnd(foo); // name\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX\" , \"ready\");\n\t\t\tEX.debug(foo.EXTween);\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "class": "EX"
        },
        {
            "file": "experJS\\experJS.js",
            "line": 208,
            "itemtype": "method",
            "name": "requireComplete",
            "access": "private",
            "tagname": "",
            "class": "EX"
        },
        {
            "file": "experJS\\experJS.js",
            "line": 233,
            "description": "console 속성을 사용할 수 있는 환경일 경우 console 창으로 내용을 출력합니다.\n<br/>파라미터의 갯수는 상관없고, 파라미터의 갯수가 한 개일 경우 console.log 를 통한 출력과 동일한 결과를 얻을 수 있습니다.",
            "itemtype": "method",
            "name": "debug",
            "static": 1,
            "params": [
                {
                    "name": "...",
                    "description": "출력할 파라미터(들)",
                    "type": "Arguments"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback1\");\n\t\t});\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback2\");\n\t\t});\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback3\");\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "class": "EX"
        },
        {
            "file": "experJS\\experJS.js",
            "line": 302,
            "description": "console 창이 아닌 alert 창으로 디버깅 출력을 합니다.",
            "itemtype": "property",
            "name": "debugAlert",
            "type": "{boolean}",
            "default": "false",
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback\");\n\t\t\tEX.debugAlert = true;\n\t\t\tEX.debug(\"EX.ready\" , \"debugAlert=\" , EX.debugAlert);\n\t\t\tEX.debugAlert = false;\n\t\t\tEX.debug(\"EX.ready\" , \"debugAlert=\" , EX.debugAlert);\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "class": "EX"
        },
        {
            "file": "experJS\\experJS.js",
            "line": 333,
            "description": "문서(html)가 로드가 완료되었고 준비가 된 상태일 때 지정된 callback 메소드를 실행 시킵니다.\n<br/>문서가 준비된 상태가 아니라면 대기큐(queue)에 callback 메소드를 쌓아 놓고 문서가 준비 상태가 될때 실행 시킵니다.\n<br/>문서가 이미 준비된 상태에서 해당 메소드를 호출하면 callback 메소를 대기큐에 쌓지 않고 바로 실행 시킵니다.",
            "itemtype": "method",
            "name": "ready",
            "static": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\t<!DOCTYPE html>\n\t<html>\n\t<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta http-equiv=\"Content-Style-Type\" content=\"text/css\" />\n\t<title></title>\n\t<script type=\"text/javascript\" src=\"../../experJS/experJS.js\"></script>\n\t<script type=\"text/javascript\">\n\t(function(){\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback1\");\n\t\t});\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback2\");\n\t\t});\n\t\tEX.ready(function(){\n\t\t\tEX.debug(\"EX.ready\" , \"callback3\");\n\t\t});\n\t})();\n\t</script>\n\t</head>\n\t<body>\n\t</body>\n\t</html>"
            ],
            "class": "EX"
        },
        {
            "file": "experJS\\experJS.js",
            "line": 379,
            "itemtype": "method",
            "name": "initialize",
            "access": "private",
            "tagname": "",
            "class": "EX"
        }
    ],
    "warnings": [
        {
            "message": "param name/type/descript missing",
            "line": " experJS\\ui\\EXCheckBox.js:263"
        },
        {
            "message": "param name/type/descript missing",
            "line": " experJS\\ui\\EXRadioButton.js:333"
        },
        {
            "message": "unknown tag: retrun",
            "line": " experJS\\utils\\EXBrowser.js:229"
        },
        {
            "message": "unknown tag: retrun",
            "line": " experJS\\utils\\EXBrowser.js:265"
        },
        {
            "message": "unknown tag: retrun",
            "line": " experJS\\utils\\EXBrowser.js:335"
        },
        {
            "message": "Missing item type",
            "line": " experJS\\vender\\CssQuery.js:1213"
        }
    ]
}